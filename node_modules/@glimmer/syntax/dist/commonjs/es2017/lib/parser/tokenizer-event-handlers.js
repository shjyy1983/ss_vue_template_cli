'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TokenizerEventHandlers = exports.voidMap = undefined;
exports.preprocess = preprocess;

var _builders = require('../builders');

var _builders2 = _interopRequireDefault(_builders);

var _utils = require('../utils');

var _handlebarsNodeVisitors = require('./handlebars-node-visitors');

var _syntaxError = require('../errors/syntax-error');

var _syntaxError2 = _interopRequireDefault(_syntaxError);

var _traverse = require('../traversal/traverse');

var _traverse2 = _interopRequireDefault(_traverse);

var _print = require('../generation/print');

var _print2 = _interopRequireDefault(_print);

var _walker = require('../traversal/walker');

var _walker2 = _interopRequireDefault(_walker);

var _handlebars = require('handlebars');

var handlebars = _interopRequireWildcard(_handlebars);

var _util = require('@glimmer/util');

var _simpleHtmlTokenizer = require('simple-html-tokenizer');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const voidMap = exports.voidMap = Object.create(null);
let voidTagNames = 'area base br col command embed hr img input keygen link meta param source track wbr';
voidTagNames.split(' ').forEach(tagName => {
    voidMap[tagName] = true;
});
class TokenizerEventHandlers extends _handlebarsNodeVisitors.HandlebarsNodeVisitors {
    constructor() {
        super(...arguments);
        this.tagOpenLine = 0;
        this.tagOpenColumn = 0;
    }
    reset() {
        this.currentNode = null;
    }
    // Comment
    beginComment() {
        this.currentNode = _builders2.default.comment('');
        this.currentNode.loc = {
            source: null,
            start: _builders2.default.pos(this.tagOpenLine, this.tagOpenColumn),
            end: null
        };
    }
    appendToCommentData(char) {
        this.currentComment.value += char;
    }
    finishComment() {
        this.currentComment.loc.end = _builders2.default.pos(this.tokenizer.line, this.tokenizer.column);
        (0, _utils.appendChild)(this.currentElement(), this.currentComment);
    }
    // Data
    beginData() {
        this.currentNode = _builders2.default.text();
        this.currentNode.loc = {
            source: null,
            start: _builders2.default.pos(this.tokenizer.line, this.tokenizer.column),
            end: null
        };
    }
    appendToData(char) {
        this.currentData.chars += char;
    }
    finishData() {
        this.currentData.loc.end = _builders2.default.pos(this.tokenizer.line, this.tokenizer.column);
        (0, _utils.appendChild)(this.currentElement(), this.currentData);
    }
    // Tags - basic
    tagOpen() {
        this.tagOpenLine = this.tokenizer.line;
        this.tagOpenColumn = this.tokenizer.column;
    }
    beginStartTag() {
        this.currentNode = {
            type: 'StartTag',
            name: '',
            attributes: [],
            modifiers: [],
            comments: [],
            selfClosing: false,
            loc: _builders.SYNTHETIC
        };
    }
    beginEndTag() {
        this.currentNode = {
            type: 'EndTag',
            name: '',
            attributes: [],
            modifiers: [],
            comments: [],
            selfClosing: false,
            loc: _builders.SYNTHETIC
        };
    }
    finishTag() {
        let { line, column } = this.tokenizer;
        let tag = this.currentTag;
        tag.loc = _builders2.default.loc(this.tagOpenLine, this.tagOpenColumn, line, column);
        if (tag.type === 'StartTag') {
            this.finishStartTag();
            if (voidMap[tag.name] || tag.selfClosing) {
                this.finishEndTag(true);
            }
        } else if (tag.type === 'EndTag') {
            this.finishEndTag(false);
        }
    }
    finishStartTag() {
        let { name, attributes: attrs, modifiers, comments, selfClosing } = this.currentStartTag;
        let loc = _builders2.default.loc(this.tagOpenLine, this.tagOpenColumn);
        let element = _builders2.default.element({ name, selfClosing }, { attrs, modifiers, comments, loc });
        this.elementStack.push(element);
    }
    finishEndTag(isVoid) {
        let tag = this.currentTag;
        let element = this.elementStack.pop();
        let parent = this.currentElement();
        validateEndTag(tag, element, isVoid);
        element.loc.end.line = this.tokenizer.line;
        element.loc.end.column = this.tokenizer.column;
        (0, _utils.parseElementBlockParams)(element);
        (0, _utils.appendChild)(parent, element);
    }
    markTagAsSelfClosing() {
        this.currentTag.selfClosing = true;
    }
    // Tags - name
    appendToTagName(char) {
        this.currentTag.name += char;
    }
    // Tags - attributes
    beginAttribute() {
        let tag = this.currentTag;
        if (tag.type === 'EndTag') {
            throw new _syntaxError2.default(`Invalid end tag: closing tag must not have attributes, ` + `in \`${tag.name}\` (on line ${this.tokenizer.line}).`, tag.loc);
        }
        this.currentAttribute = {
            name: '',
            parts: [],
            isQuoted: false,
            isDynamic: false,
            start: _builders2.default.pos(this.tokenizer.line, this.tokenizer.column),
            valueStartLine: 0,
            valueStartColumn: 0
        };
    }
    appendToAttributeName(char) {
        this.currentAttr.name += char;
    }
    beginAttributeValue(isQuoted) {
        this.currentAttr.isQuoted = isQuoted;
        this.currentAttr.valueStartLine = this.tokenizer.line;
        this.currentAttr.valueStartColumn = this.tokenizer.column;
    }
    appendToAttributeValue(char) {
        let parts = this.currentAttr.parts;
        let lastPart = parts[parts.length - 1];
        if (lastPart && lastPart.type === 'TextNode') {
            lastPart.chars += char;
            // update end location for each added char
            lastPart.loc.end.line = this.tokenizer.line;
            lastPart.loc.end.column = this.tokenizer.column;
        } else {
            // initially assume the text node is a single char
            let loc = _builders2.default.loc(this.tokenizer.line, this.tokenizer.column, this.tokenizer.line, this.tokenizer.column);
            // correct for `\n` as first char
            if (char === '\n') {
                loc.start.line -= 1;
                loc.start.column = lastPart ? lastPart.loc.end.column : this.currentAttr.valueStartColumn;
            }
            let text = _builders2.default.text(char, loc);
            parts.push(text);
        }
    }
    finishAttributeValue() {
        let { name, parts, isQuoted, isDynamic, valueStartLine, valueStartColumn } = this.currentAttr;
        let value = assembleAttributeValue(parts, isQuoted, isDynamic, this.tokenizer.line);
        value.loc = _builders2.default.loc(valueStartLine, valueStartColumn, this.tokenizer.line, this.tokenizer.column);
        let loc = _builders2.default.loc(this.currentAttr.start.line, this.currentAttr.start.column, this.tokenizer.line, this.tokenizer.column);
        let attribute = _builders2.default.attr(name, value, loc);
        this.currentStartTag.attributes.push(attribute);
    }
    reportSyntaxError(message) {
        throw new _syntaxError2.default(`Syntax error at line ${this.tokenizer.line} col ${this.tokenizer.column}: ${message}`, _builders2.default.loc(this.tokenizer.line, this.tokenizer.column));
    }
}
exports.TokenizerEventHandlers = TokenizerEventHandlers;
function assembleAttributeValue(parts, isQuoted, isDynamic, line) {
    if (isDynamic) {
        if (isQuoted) {
            return assembleConcatenatedValue(parts);
        } else {
            if (parts.length === 1 || parts.length === 2 && parts[1].type === 'TextNode' && parts[1].chars === '/') {
                return parts[0];
            } else {
                throw new _syntaxError2.default(`An unquoted attribute value must be a string or a mustache, ` + `preceeded by whitespace or a '=' character, and ` + `followed by whitespace, a '>' character, or '/>' (on line ${line})`, _builders2.default.loc(line, 0));
            }
        }
    } else {
        return parts.length > 0 ? parts[0] : _builders2.default.text('');
    }
}
function assembleConcatenatedValue(parts) {
    for (let i = 0; i < parts.length; i++) {
        let part = parts[i];
        if (part.type !== 'MustacheStatement' && part.type !== 'TextNode') {
            throw new _syntaxError2.default('Unsupported node in quoted attribute value: ' + part['type'], part.loc);
        }
    }
    return _builders2.default.concat(parts);
}
function validateEndTag(tag, element, selfClosing) {
    let error;
    if (voidMap[tag.name] && !selfClosing) {
        // EngTag is also called by StartTag for void and self-closing tags (i.e.
        // <input> or <br />, so we need to check for that here. Otherwise, we would
        // throw an error for those cases.
        error = 'Invalid end tag ' + formatEndTagInfo(tag) + ' (void elements cannot have end tags).';
    } else if (element.tag === undefined) {
        error = 'Closing tag ' + formatEndTagInfo(tag) + ' without an open tag.';
    } else if (element.tag !== tag.name) {
        error = 'Closing tag ' + formatEndTagInfo(tag) + ' did not match last open tag `' + element.tag + '` (on line ' + element.loc.start.line + ').';
    }
    if (error) {
        throw new _syntaxError2.default(error, element.loc);
    }
}
function formatEndTagInfo(tag) {
    return '`' + tag.name + '` (on line ' + tag.loc.end.line + ')';
}
const syntax = {
    parse: preprocess,
    builders: _builders2.default,
    print: _print2.default,
    traverse: _traverse2.default,
    Walker: _walker2.default
};
function preprocess(html, options = {}) {
    let mode = options.mode || 'precompile';
    let ast;
    if (typeof html === 'object') {
        ast = html;
    } else {
        let parseOptions = options.parseOptions || {};
        if (mode === 'codemod') {
            parseOptions.ignoreStandalone = true;
        }
        ast = handlebars.parse(html, parseOptions);
    }
    let entityParser = undefined;
    if (mode === 'codemod') {
        entityParser = new _simpleHtmlTokenizer.EntityParser({});
    }
    let program = new TokenizerEventHandlers(html, entityParser).acceptTemplate(ast);
    if (options && options.plugins && options.plugins.ast) {
        for (let i = 0, l = options.plugins.ast.length; i < l; i++) {
            let transform = options.plugins.ast[i];
            let env = (0, _util.assign)({}, options, { syntax }, { plugins: undefined });
            let pluginResult = transform(env);
            (0, _traverse2.default)(program, pluginResult.visitor);
        }
    }
    return program;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,