import { preprocess } from '@glimmer/syntax';
import TemplateCompiler from './template-compiler';
export var defaultId = function () {
    if (typeof require === 'function') {
        try {
            /* tslint:disable:no-require-imports */
            var crypto = require('crypto');
            /* tslint:enable:no-require-imports */
            var idFn = function idFn(src) {
                var hash = crypto.createHash('sha1');
                hash.update(src, 'utf8');
                // trim to 6 bytes of data (2^48 - 1)
                return hash.digest('base64').substring(0, 8);
            };
            idFn('test');
            return idFn;
        } catch (e) {}
    }
    return function idFn() {
        return null;
    };
}();
var defaultOptions = {
    id: defaultId,
    meta: {}
};
export function precompile(string) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultOptions;

    var ast = preprocess(string, options);
    var meta = options.meta;

    var _TemplateCompiler$com = TemplateCompiler.compile(ast, options),
        block = _TemplateCompiler$com.block;

    var idFn = options.id || defaultId;
    var blockJSON = JSON.stringify(block.toJSON());
    var templateJSONObject = {
        id: idFn(JSON.stringify(meta) + blockJSON),
        block: blockJSON,
        meta: meta
    };
    // JSON is javascript
    return JSON.stringify(templateJSONObject);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL2NvbXBpbGVyL2xpYi9jb21waWxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxTQUFBLFVBQUEsUUFBQSxpQkFBQTtBQUNBLE9BQUEsZ0JBQUEsTUFBQSxxQkFBQTtBQWNBLE9BQU8sSUFBTSxZQUEyQixZQUFLO0FBQzNDLFFBQUksT0FBQSxPQUFBLEtBQUosVUFBQSxFQUFtQztBQUNqQyxZQUFJO0FBQ0Y7QUFDQSxnQkFBTSxTQUFTLFFBQWYsUUFBZSxDQUFmO0FBQ0E7QUFFQSxnQkFBSSxPQUFxQixTQUFyQixJQUFxQixNQUFNO0FBQzdCLG9CQUFJLE9BQU8sT0FBQSxVQUFBLENBQVgsTUFBVyxDQUFYO0FBQ0EscUJBQUEsTUFBQSxDQUFBLEdBQUEsRUFBQSxNQUFBO0FBQ0E7QUFDQSx1QkFBTyxLQUFBLE1BQUEsQ0FBQSxRQUFBLEVBQUEsU0FBQSxDQUFBLENBQUEsRUFBUCxDQUFPLENBQVA7QUFKRixhQUFBO0FBT0EsaUJBQUEsTUFBQTtBQUVBLG1CQUFBLElBQUE7QUFkRixTQUFBLENBZUUsT0FBQSxDQUFBLEVBQVUsQ0FBRTtBQUNmO0FBRUQsV0FBTyxTQUFBLElBQUEsR0FBYTtBQUNsQixlQUFBLElBQUE7QUFERixLQUFBO0FBcEJLLENBQWdDLEVBQWhDO0FBeUJQLElBQU0saUJBQW9DO0FBQ3hDLFFBRHdDLFNBQUE7QUFFeEMsVUFBTTtBQUZrQyxDQUExQztBQW9CQSxPQUFNLFNBQUEsVUFBQSxDQUFBLE1BQUEsRUFFdUM7QUFBQSxRQUEzQyxPQUEyQyx1RUFGdkMsY0FFdUM7O0FBRTNDLFFBQUksTUFBTSxXQUFBLE1BQUEsRUFBVixPQUFVLENBQVY7QUFGMkMsUUFHdkMsSUFIdUMsR0FHM0MsT0FIMkMsQ0FHdkMsSUFIdUM7O0FBQUEsZ0NBSTNCLGlCQUFBLE9BQUEsQ0FBQSxHQUFBLEVBQWhCLE9BQWdCLENBSjJCO0FBQUEsUUFJdkMsS0FKdUMseUJBSXZDLEtBSnVDOztBQUszQyxRQUFJLE9BQU8sUUFBQSxFQUFBLElBQVgsU0FBQTtBQUNBLFFBQUksWUFBWSxLQUFBLFNBQUEsQ0FBZSxNQUEvQixNQUErQixFQUFmLENBQWhCO0FBQ0EsUUFBSSxxQkFBK0Q7QUFDakUsWUFBSSxLQUFLLEtBQUEsU0FBQSxDQUFBLElBQUEsSUFEd0QsU0FDN0QsQ0FENkQ7QUFFakUsZUFGaUUsU0FBQTtBQUdqRTtBQUhpRSxLQUFuRTtBQU1BO0FBQ0EsV0FBTyxLQUFBLFNBQUEsQ0FBUCxrQkFBTyxDQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwcmVwcm9jZXNzIH0gZnJvbSAnQGdsaW1tZXIvc3ludGF4JztcbmltcG9ydCBUZW1wbGF0ZUNvbXBpbGVyLCB7IENvbXBpbGVPcHRpb25zIH0gZnJvbSAnLi90ZW1wbGF0ZS1jb21waWxlcic7XG5pbXBvcnQgeyBPcHRpb24sIFRlbXBsYXRlSmF2YXNjcmlwdCwgU2VyaWFsaXplZFRlbXBsYXRlV2l0aExhenlCbG9jayB9IGZyb20gJ0BnbGltbWVyL2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgUHJlcHJvY2Vzc09wdGlvbnMgfSBmcm9tICdAZ2xpbW1lci9zeW50YXgnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFRlbXBsYXRlSWRGbiB7XG4gIChzcmM6IHN0cmluZyk6IE9wdGlvbjxzdHJpbmc+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFByZWNvbXBpbGVPcHRpb25zIGV4dGVuZHMgQ29tcGlsZU9wdGlvbnMsIFByZXByb2Nlc3NPcHRpb25zIHtcbiAgaWQ/OiBUZW1wbGF0ZUlkRm47XG59XG5cbmRlY2xhcmUgZnVuY3Rpb24gcmVxdWlyZShpZDogc3RyaW5nKTogYW55O1xuXG5leHBvcnQgY29uc3QgZGVmYXVsdElkOiBUZW1wbGF0ZUlkRm4gPSAoKCkgPT4ge1xuICBpZiAodHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicpIHtcbiAgICB0cnkge1xuICAgICAgLyogdHNsaW50OmRpc2FibGU6bm8tcmVxdWlyZS1pbXBvcnRzICovXG4gICAgICBjb25zdCBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKTtcbiAgICAgIC8qIHRzbGludDplbmFibGU6bm8tcmVxdWlyZS1pbXBvcnRzICovXG5cbiAgICAgIGxldCBpZEZuOiBUZW1wbGF0ZUlkRm4gPSBzcmMgPT4ge1xuICAgICAgICBsZXQgaGFzaCA9IGNyeXB0by5jcmVhdGVIYXNoKCdzaGExJyk7XG4gICAgICAgIGhhc2gudXBkYXRlKHNyYywgJ3V0ZjgnKTtcbiAgICAgICAgLy8gdHJpbSB0byA2IGJ5dGVzIG9mIGRhdGEgKDJeNDggLSAxKVxuICAgICAgICByZXR1cm4gaGFzaC5kaWdlc3QoJ2Jhc2U2NCcpLnN1YnN0cmluZygwLCA4KTtcbiAgICAgIH07XG5cbiAgICAgIGlkRm4oJ3Rlc3QnKTtcblxuICAgICAgcmV0dXJuIGlkRm47XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBpZEZuKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9O1xufSkoKTtcblxuY29uc3QgZGVmYXVsdE9wdGlvbnM6IFByZWNvbXBpbGVPcHRpb25zID0ge1xuICBpZDogZGVmYXVsdElkLFxuICBtZXRhOiB7fSxcbn07XG5cbi8qXG4gKiBDb21waWxlIGEgc3RyaW5nIGludG8gYSB0ZW1wbGF0ZSBqYXZhc2NyaXB0IHN0cmluZy5cbiAqXG4gKiBFeGFtcGxlIHVzYWdlOlxuICogICAgIGltcG9ydCB7IHByZWNvbXBpbGUgfSBmcm9tICdAZ2xpbW1lci9jb21waWxlcic7XG4gKiAgICAgaW1wb3J0IHsgdGVtcGxhdGVGYWN0b3J5IH0gZnJvbSAnZ2xpbWVyLXJ1bnRpbWUnO1xuICogICAgIGxldCB0ZW1wbGF0ZUpzID0gcHJlY29tcGlsZShcIkhvd2R5IHt7bmFtZX19XCIpO1xuICogICAgIGxldCBmYWN0b3J5ID0gdGVtcGxhdGVGYWN0b3J5KG5ldyBGdW5jdGlvbihcInJldHVybiBcIiArIHRlbXBsYXRlSnMpKCkpO1xuICogICAgIGxldCB0ZW1wbGF0ZSA9IGZhY3RvcnkuY3JlYXRlKGVudik7XG4gKlxuICogQG1ldGhvZCBwcmVjb21waWxlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIGEgR2xpbW1lciB0ZW1wbGF0ZSBzdHJpbmdcbiAqIEByZXR1cm4ge3N0cmluZ30gYSB0ZW1wbGF0ZSBqYXZhc2NyaXB0IHN0cmluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gcHJlY29tcGlsZShzdHJpbmc6IHN0cmluZywgb3B0aW9ucz86IFByZWNvbXBpbGVPcHRpb25zKTogVGVtcGxhdGVKYXZhc2NyaXB0O1xuZXhwb3J0IGZ1bmN0aW9uIHByZWNvbXBpbGUoXG4gIHN0cmluZzogc3RyaW5nLFxuICBvcHRpb25zOiBQcmVjb21waWxlT3B0aW9ucyA9IGRlZmF1bHRPcHRpb25zXG4pOiBUZW1wbGF0ZUphdmFzY3JpcHQge1xuICBsZXQgYXN0ID0gcHJlcHJvY2VzcyhzdHJpbmcsIG9wdGlvbnMpO1xuICBsZXQgeyBtZXRhIH0gPSBvcHRpb25zO1xuICBsZXQgeyBibG9jayB9ID0gVGVtcGxhdGVDb21waWxlci5jb21waWxlKGFzdCwgb3B0aW9ucyk7XG4gIGxldCBpZEZuID0gb3B0aW9ucy5pZCB8fCBkZWZhdWx0SWQ7XG4gIGxldCBibG9ja0pTT04gPSBKU09OLnN0cmluZ2lmeShibG9jay50b0pTT04oKSk7XG4gIGxldCB0ZW1wbGF0ZUpTT05PYmplY3Q6IFNlcmlhbGl6ZWRUZW1wbGF0ZVdpdGhMYXp5QmxvY2s8dW5rbm93bj4gPSB7XG4gICAgaWQ6IGlkRm4oSlNPTi5zdHJpbmdpZnkobWV0YSkgKyBibG9ja0pTT04pLFxuICAgIGJsb2NrOiBibG9ja0pTT04sXG4gICAgbWV0YSxcbiAgfTtcblxuICAvLyBKU09OIGlzIGphdmFzY3JpcHRcbiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRlbXBsYXRlSlNPTk9iamVjdCk7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9