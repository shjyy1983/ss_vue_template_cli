var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

import { assert } from '@glimmer/util';
import { Stack, DictSet } from '@glimmer/util';
import { isArgument, isAttribute, isFlushElement } from '@glimmer/wire-format';
export var Block = function () {
    function Block() {
        _classCallCheck(this, Block);

        this.statements = [];
    }

    Block.prototype.push = function push(statement) {
        this.statements.push(statement);
    };

    return Block;
}();
export var InlineBlock = function (_Block) {
    _inherits(InlineBlock, _Block);

    function InlineBlock(table) {
        _classCallCheck(this, InlineBlock);

        var _this = _possibleConstructorReturn(this, _Block.call(this));

        _this.table = table;
        return _this;
    }

    InlineBlock.prototype.toJSON = function toJSON() {
        return {
            statements: this.statements,
            parameters: this.table.slots
        };
    };

    return InlineBlock;
}(Block);
export var NamedBlock = function (_InlineBlock) {
    _inherits(NamedBlock, _InlineBlock);

    function NamedBlock(name, table) {
        _classCallCheck(this, NamedBlock);

        var _this2 = _possibleConstructorReturn(this, _InlineBlock.call(this, table));

        _this2.name = name;
        return _this2;
    }

    return NamedBlock;
}(InlineBlock);
export var TemplateBlock = function (_Block2) {
    _inherits(TemplateBlock, _Block2);

    function TemplateBlock(symbolTable) {
        _classCallCheck(this, TemplateBlock);

        var _this3 = _possibleConstructorReturn(this, _Block2.call(this));

        _this3.symbolTable = symbolTable;
        _this3.type = 'template';
        _this3.yields = new DictSet();
        _this3.named = new DictSet();
        _this3.blocks = [];
        _this3.hasEval = false;
        return _this3;
    }

    TemplateBlock.prototype.push = function push(statement) {
        this.statements.push(statement);
    };

    TemplateBlock.prototype.toJSON = function toJSON() {
        return {
            symbols: this.symbolTable.symbols,
            statements: this.statements,
            hasEval: this.hasEval
        };
    };

    return TemplateBlock;
}(Block);
export var ComponentBlock = function (_Block3) {
    _inherits(ComponentBlock, _Block3);

    function ComponentBlock(tag, table, selfClosing) {
        _classCallCheck(this, ComponentBlock);

        var _this4 = _possibleConstructorReturn(this, _Block3.call(this));

        _this4.tag = tag;
        _this4.table = table;
        _this4.selfClosing = selfClosing;
        _this4.attributes = [];
        _this4.arguments = [];
        _this4.inParams = true;
        _this4.positionals = [];
        _this4.blocks = [];
        return _this4;
    }

    ComponentBlock.prototype.push = function push(statement) {
        if (this.inParams) {
            if (isFlushElement(statement)) {
                this.inParams = false;
            } else if (isArgument(statement)) {
                this.arguments.push(statement);
            } else if (isAttribute(statement)) {
                this.attributes.push(statement);
            } else {
                throw new Error('Compile Error: only parameters allowed before flush-element');
            }
        } else {
            this.statements.push(statement);
        }
    };

    ComponentBlock.prototype.pushBlock = function pushBlock(name, block) {
        this.blocks.push([name, block]);
    };

    ComponentBlock.prototype.toJSON = function toJSON() {
        var blocks = void 0;
        var args = this.arguments;
        var keys = args.map(function (arg) {
            return arg[1];
        });
        var values = args.map(function (arg) {
            return arg[2];
        });
        if (this.selfClosing) {
            blocks = null;
        } else if (this.blocks.length > 0) {
            var _keys = [];
            var _values = [];
            for (var i = 0; i < this.blocks.length; i++) {
                var _blocks$i = this.blocks[i],
                    key = _blocks$i[0],
                    value = _blocks$i[1];

                _keys.push(key.slice(1));
                _values.push(value);
            }
            blocks = [_keys, _values];
        } else {
            blocks = [['default'], [{
                statements: this.statements,
                parameters: this.table.slots
            }]];
        }
        return [this.tag, this.attributes, [keys, values], blocks];
    };

    return ComponentBlock;
}(Block);
export var Template = function () {
    function Template(symbols) {
        _classCallCheck(this, Template);

        this.block = new TemplateBlock(symbols);
    }

    Template.prototype.toJSON = function toJSON() {
        return this.block.toJSON();
    };

    return Template;
}();

var JavaScriptCompiler = function () {
    function JavaScriptCompiler(opcodes, symbols, options) {
        _classCallCheck(this, JavaScriptCompiler);

        this.blocks = new Stack();
        this.values = [];
        this.opcodes = opcodes;
        this.template = new Template(symbols);
        this.options = options;
    }

    JavaScriptCompiler.process = function process(opcodes, symbols, options) {
        var compiler = new JavaScriptCompiler(opcodes, symbols, options);
        return compiler.process();
    };

    JavaScriptCompiler.prototype.process = function process() {
        var _this5 = this;

        this.opcodes.forEach(function (op) {
            var opcode = op[0];
            var arg = op[1];
            if (!_this5[opcode]) {
                throw new Error('unimplemented ' + opcode + ' on JavaScriptCompiler');
            }
            _this5[opcode](arg);
        });
        return this.template;
    };
    /// Nesting


    JavaScriptCompiler.prototype.startBlock = function startBlock(program) {
        this.startInlineBlock(program.symbols);
    };

    JavaScriptCompiler.prototype.endBlock = function endBlock() {
        var block = this.endInlineBlock();
        this.template.block.blocks.push(block);
    };

    JavaScriptCompiler.prototype.startProgram = function startProgram() {
        this.blocks.push(this.template.block);
    };

    JavaScriptCompiler.prototype.endProgram = function endProgram() {};
    /// Statements


    JavaScriptCompiler.prototype.text = function text(content) {
        this.push([0 /* Text */, content]);
    };

    JavaScriptCompiler.prototype.append = function append(trusted) {
        this.push([1 /* Append */, this.popValue(), trusted]);
    };

    JavaScriptCompiler.prototype.comment = function comment(value) {
        this.push([2 /* Comment */, value]);
    };

    JavaScriptCompiler.prototype.modifier = function modifier(name) {
        var params = this.popValue();
        var hash = this.popValue();
        this.push([3 /* Modifier */, name, params, hash]);
    };

    JavaScriptCompiler.prototype.block = function block(_ref) {
        var name = _ref[0],
            template = _ref[1],
            inverse = _ref[2];

        var params = this.popValue();
        var hash = this.popValue();
        var blocks = this.template.block.blocks;
        false && assert(typeof template !== 'number' || blocks[template] !== null, 'missing block in the compiler');
        false && assert(typeof inverse !== 'number' || blocks[inverse] !== null, 'missing block in the compiler');

        var namedBlocks = void 0;
        if (template === null && inverse === null) {
            namedBlocks = null;
        } else if (inverse === null) {
            namedBlocks = [['default'], [blocks[template]]];
        } else {
            namedBlocks = [['default', 'else'], [blocks[template], blocks[inverse]]];
        }
        this.push([4 /* Block */, name, params, hash, namedBlocks]);
    };

    JavaScriptCompiler.prototype.openComponent = function openComponent(element) {
        var tag = this.options && this.options.customizeComponentName ? this.options.customizeComponentName(element.tag) : element.tag;
        var component = new ComponentBlock(tag, element.symbols, element.selfClosing);
        this.blocks.push(component);
    };

    JavaScriptCompiler.prototype.openNamedBlock = function openNamedBlock(element) {
        var block = new NamedBlock(element.tag, element.symbols);
        this.blocks.push(block);
    };

    JavaScriptCompiler.prototype.openElement = function openElement(_ref2) {
        var element = _ref2[0],
            simple = _ref2[1];

        var tag = element.tag;
        if (element.blockParams.length > 0) {
            throw new Error('Compile Error: <' + element.tag + '> is not a component and doesn\'t support block parameters');
        } else {
            this.push([7 /* OpenElement */, tag, simple]);
        }
    };

    JavaScriptCompiler.prototype.flushElement = function flushElement() {
        this.push([9 /* FlushElement */]);
    };

    JavaScriptCompiler.prototype.closeComponent = function closeComponent(_element) {
        var _endComponent = this.endComponent(),
            tag = _endComponent[0],
            attrs = _endComponent[1],
            args = _endComponent[2],
            blocks = _endComponent[3];

        this.push([5 /* Component */, tag, attrs, args, blocks]);
    };

    JavaScriptCompiler.prototype.closeNamedBlock = function closeNamedBlock(_element) {
        var blocks = this.blocks;

        var block = blocks.pop();
        this.currentComponent.pushBlock(block.name, block.toJSON());
    };

    JavaScriptCompiler.prototype.closeDynamicComponent = function closeDynamicComponent(_element) {
        var _endComponent2 = this.endComponent(),
            attrs = _endComponent2[1],
            args = _endComponent2[2],
            block = _endComponent2[3];

        this.push([6 /* DynamicComponent */, this.popValue(), attrs, args, block]);
    };

    JavaScriptCompiler.prototype.closeElement = function closeElement(_element) {
        this.push([10 /* CloseElement */]);
    };

    JavaScriptCompiler.prototype.staticAttr = function staticAttr(_ref3) {
        var name = _ref3[0],
            namespace = _ref3[1];

        var value = this.popValue();
        this.push([11 /* StaticAttr */, name, value, namespace]);
    };

    JavaScriptCompiler.prototype.dynamicAttr = function dynamicAttr(_ref4) {
        var name = _ref4[0],
            namespace = _ref4[1];

        var value = this.popValue();
        this.push([12 /* DynamicAttr */, name, value, namespace]);
    };

    JavaScriptCompiler.prototype.componentAttr = function componentAttr(_ref5) {
        var name = _ref5[0],
            namespace = _ref5[1];

        var value = this.popValue();
        this.push([13 /* ComponentAttr */, name, value, namespace]);
    };

    JavaScriptCompiler.prototype.trustingAttr = function trustingAttr(_ref6) {
        var name = _ref6[0],
            namespace = _ref6[1];

        var value = this.popValue();
        this.push([19 /* TrustingDynamicAttr */, name, value, namespace]);
    };

    JavaScriptCompiler.prototype.trustingComponentAttr = function trustingComponentAttr(_ref7) {
        var name = _ref7[0],
            namespace = _ref7[1];

        var value = this.popValue();
        this.push([20 /* TrustingComponentAttr */, name, value, namespace]);
    };

    JavaScriptCompiler.prototype.staticArg = function staticArg(name) {
        var value = this.popValue();
        this.push([18 /* StaticArg */, name, value]);
    };

    JavaScriptCompiler.prototype.dynamicArg = function dynamicArg(name) {
        var value = this.popValue();
        this.push([17 /* DynamicArg */, name, value]);
    };

    JavaScriptCompiler.prototype.yield = function _yield(to) {
        var params = this.popValue();
        this.push([15 /* Yield */, to, params]);
    };

    JavaScriptCompiler.prototype.attrSplat = function attrSplat(to) {
        // consume (and disregard) the value pushed for the
        // ...attributes attribute
        this.popValue();
        this.push([14 /* AttrSplat */, to]);
    };

    JavaScriptCompiler.prototype.debugger = function _debugger(evalInfo) {
        this.push([21 /* Debugger */, evalInfo]);
        this.template.block.hasEval = true;
    };

    JavaScriptCompiler.prototype.hasBlock = function hasBlock(name) {
        this.pushValue([26 /* HasBlock */, name]);
    };

    JavaScriptCompiler.prototype.hasBlockParams = function hasBlockParams(name) {
        this.pushValue([27 /* HasBlockParams */, name]);
    };

    JavaScriptCompiler.prototype.partial = function partial(evalInfo) {
        var params = this.popValue();
        this.push([16 /* Partial */, params[0], evalInfo]);
        this.template.block.hasEval = true;
    };
    /// Expressions


    JavaScriptCompiler.prototype.literal = function literal(value) {
        if (value === undefined) {
            this.pushValue([28 /* Undefined */]);
        } else {
            this.pushValue(value);
        }
    };

    JavaScriptCompiler.prototype.unknown = function unknown(name) {
        this.pushValue([23 /* Unknown */, name]);
    };

    JavaScriptCompiler.prototype.get = function get(_ref8) {
        var head = _ref8[0],
            path = _ref8[1];

        this.pushValue([24 /* Get */, head, path]);
    };

    JavaScriptCompiler.prototype.maybeLocal = function maybeLocal(path) {
        this.pushValue([25 /* MaybeLocal */, path]);
    };

    JavaScriptCompiler.prototype.concat = function concat() {
        this.pushValue([30 /* Concat */, this.popValue()]);
    };

    JavaScriptCompiler.prototype.helper = function helper(name) {
        var params = this.popValue();
        var hash = this.popValue();
        this.pushValue([29 /* Helper */, name, params, hash]);
    };
    /// Stack Management Opcodes


    JavaScriptCompiler.prototype.prepareArray = function prepareArray(size) {
        var values = [];
        for (var i = 0; i < size; i++) {
            values.push(this.popValue());
        }
        this.pushValue(values);
    };

    JavaScriptCompiler.prototype.prepareObject = function prepareObject(size) {
        false && assert(this.values.length >= size, 'Expected ' + size + ' values on the stack, found ' + this.values.length);

        var keys = new Array(size);
        var values = new Array(size);
        for (var i = 0; i < size; i++) {
            keys[i] = this.popValue();
            values[i] = this.popValue();
        }
        this.pushValue([keys, values]);
    };
    /// Utilities


    JavaScriptCompiler.prototype.endComponent = function endComponent() {
        var component = this.blocks.pop();
        false && assert(component instanceof ComponentBlock, 'Compiler bug: endComponent() should end a component');

        return component.toJSON();
    };

    JavaScriptCompiler.prototype.startInlineBlock = function startInlineBlock(symbols) {
        var block = new InlineBlock(symbols);
        this.blocks.push(block);
    };

    JavaScriptCompiler.prototype.endInlineBlock = function endInlineBlock() {
        var blocks = this.blocks;

        var block = blocks.pop();
        return block.toJSON();
    };

    JavaScriptCompiler.prototype.push = function push(args) {
        this.currentBlock.push(args);
    };

    JavaScriptCompiler.prototype.pushValue = function pushValue(val) {
        this.values.push(val);
    };

    JavaScriptCompiler.prototype.popValue = function popValue() {
        false && assert(this.values.length, 'No expression found on stack');

        return this.values.pop();
    };

    _createClass(JavaScriptCompiler, [{
        key: 'currentBlock',
        get: function get() {
            return this.blocks.current;
        }
    }, {
        key: 'currentComponent',
        get: function get() {
            var block = this.currentBlock;
            if (block instanceof ComponentBlock) {
                return block;
            } else {
                throw new Error('Expected ComponentBlock on stack, found ' + block.constructor.name);
            }
        }
    }]);

    return JavaScriptCompiler;
}();

export default JavaScriptCompiler;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,