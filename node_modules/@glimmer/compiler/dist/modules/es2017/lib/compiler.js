import { preprocess } from '@glimmer/syntax';
import TemplateCompiler from './template-compiler';
export const defaultId = (() => {
    if (typeof require === 'function') {
        try {
            /* tslint:disable:no-require-imports */
            const crypto = require('crypto');
            /* tslint:enable:no-require-imports */
            let idFn = src => {
                let hash = crypto.createHash('sha1');
                hash.update(src, 'utf8');
                // trim to 6 bytes of data (2^48 - 1)
                return hash.digest('base64').substring(0, 8);
            };
            idFn('test');
            return idFn;
        } catch (e) {}
    }
    return function idFn() {
        return null;
    };
})();
const defaultOptions = {
    id: defaultId,
    meta: {}
};
export function precompile(string, options = defaultOptions) {
    let ast = preprocess(string, options);
    let { meta } = options;
    let { block } = TemplateCompiler.compile(ast, options);
    let idFn = options.id || defaultId;
    let blockJSON = JSON.stringify(block.toJSON());
    let templateJSONObject = {
        id: idFn(JSON.stringify(meta) + blockJSON),
        block: blockJSON,
        meta
    };
    // JSON is javascript
    return JSON.stringify(templateJSONObject);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL2NvbXBpbGVyL2xpYi9jb21waWxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxTQUFTLFVBQVQsUUFBMkIsaUJBQTNCO0FBQ0EsT0FBTyxnQkFBUCxNQUFpRCxxQkFBakQ7QUFjQSxPQUFPLE1BQU0sWUFBMEIsQ0FBQyxNQUFLO0FBQzNDLFFBQUksT0FBTyxPQUFQLEtBQW1CLFVBQXZCLEVBQW1DO0FBQ2pDLFlBQUk7QUFDRjtBQUNBLGtCQUFNLFNBQVMsUUFBUSxRQUFSLENBQWY7QUFDQTtBQUVBLGdCQUFJLE9BQXFCLE9BQU07QUFDN0Isb0JBQUksT0FBTyxPQUFPLFVBQVAsQ0FBa0IsTUFBbEIsQ0FBWDtBQUNBLHFCQUFLLE1BQUwsQ0FBWSxHQUFaLEVBQWlCLE1BQWpCO0FBQ0E7QUFDQSx1QkFBTyxLQUFLLE1BQUwsQ0FBWSxRQUFaLEVBQXNCLFNBQXRCLENBQWdDLENBQWhDLEVBQW1DLENBQW5DLENBQVA7QUFDRCxhQUxEO0FBT0EsaUJBQUssTUFBTDtBQUVBLG1CQUFPLElBQVA7QUFDRCxTQWZELENBZUUsT0FBTyxDQUFQLEVBQVUsQ0FBRTtBQUNmO0FBRUQsV0FBTyxTQUFTLElBQVQsR0FBYTtBQUNsQixlQUFPLElBQVA7QUFDRCxLQUZEO0FBR0QsQ0F2QnNDLEdBQWhDO0FBeUJQLE1BQU0saUJBQW9DO0FBQ3hDLFFBQUksU0FEb0M7QUFFeEMsVUFBTTtBQUZrQyxDQUExQztBQW9CQSxPQUFNLFNBQVUsVUFBVixDQUNKLE1BREksRUFFSixVQUE2QixjQUZ6QixFQUV1QztBQUUzQyxRQUFJLE1BQU0sV0FBVyxNQUFYLEVBQW1CLE9BQW5CLENBQVY7QUFDQSxRQUFJLEVBQUUsSUFBRixLQUFXLE9BQWY7QUFDQSxRQUFJLEVBQUUsS0FBRixLQUFZLGlCQUFpQixPQUFqQixDQUF5QixHQUF6QixFQUE4QixPQUE5QixDQUFoQjtBQUNBLFFBQUksT0FBTyxRQUFRLEVBQVIsSUFBYyxTQUF6QjtBQUNBLFFBQUksWUFBWSxLQUFLLFNBQUwsQ0FBZSxNQUFNLE1BQU4sRUFBZixDQUFoQjtBQUNBLFFBQUkscUJBQStEO0FBQ2pFLFlBQUksS0FBSyxLQUFLLFNBQUwsQ0FBZSxJQUFmLElBQXVCLFNBQTVCLENBRDZEO0FBRWpFLGVBQU8sU0FGMEQ7QUFHakU7QUFIaUUsS0FBbkU7QUFNQTtBQUNBLFdBQU8sS0FBSyxTQUFMLENBQWUsa0JBQWYsQ0FBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcHJlcHJvY2VzcyB9IGZyb20gJ0BnbGltbWVyL3N5bnRheCc7XG5pbXBvcnQgVGVtcGxhdGVDb21waWxlciwgeyBDb21waWxlT3B0aW9ucyB9IGZyb20gJy4vdGVtcGxhdGUtY29tcGlsZXInO1xuaW1wb3J0IHsgT3B0aW9uLCBUZW1wbGF0ZUphdmFzY3JpcHQsIFNlcmlhbGl6ZWRUZW1wbGF0ZVdpdGhMYXp5QmxvY2sgfSBmcm9tICdAZ2xpbW1lci9pbnRlcmZhY2VzJztcbmltcG9ydCB7IFByZXByb2Nlc3NPcHRpb25zIH0gZnJvbSAnQGdsaW1tZXIvc3ludGF4JztcblxuZXhwb3J0IGludGVyZmFjZSBUZW1wbGF0ZUlkRm4ge1xuICAoc3JjOiBzdHJpbmcpOiBPcHRpb248c3RyaW5nPjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQcmVjb21waWxlT3B0aW9ucyBleHRlbmRzIENvbXBpbGVPcHRpb25zLCBQcmVwcm9jZXNzT3B0aW9ucyB7XG4gIGlkPzogVGVtcGxhdGVJZEZuO1xufVxuXG5kZWNsYXJlIGZ1bmN0aW9uIHJlcXVpcmUoaWQ6IHN0cmluZyk6IGFueTtcblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRJZDogVGVtcGxhdGVJZEZuID0gKCgpID0+IHtcbiAgaWYgKHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdHJ5IHtcbiAgICAgIC8qIHRzbGludDpkaXNhYmxlOm5vLXJlcXVpcmUtaW1wb3J0cyAqL1xuICAgICAgY29uc3QgY3J5cHRvID0gcmVxdWlyZSgnY3J5cHRvJyk7XG4gICAgICAvKiB0c2xpbnQ6ZW5hYmxlOm5vLXJlcXVpcmUtaW1wb3J0cyAqL1xuXG4gICAgICBsZXQgaWRGbjogVGVtcGxhdGVJZEZuID0gc3JjID0+IHtcbiAgICAgICAgbGV0IGhhc2ggPSBjcnlwdG8uY3JlYXRlSGFzaCgnc2hhMScpO1xuICAgICAgICBoYXNoLnVwZGF0ZShzcmMsICd1dGY4Jyk7XG4gICAgICAgIC8vIHRyaW0gdG8gNiBieXRlcyBvZiBkYXRhICgyXjQ4IC0gMSlcbiAgICAgICAgcmV0dXJuIGhhc2guZGlnZXN0KCdiYXNlNjQnKS5zdWJzdHJpbmcoMCwgOCk7XG4gICAgICB9O1xuXG4gICAgICBpZEZuKCd0ZXN0Jyk7XG5cbiAgICAgIHJldHVybiBpZEZuO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gaWRGbigpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcbn0pKCk7XG5cbmNvbnN0IGRlZmF1bHRPcHRpb25zOiBQcmVjb21waWxlT3B0aW9ucyA9IHtcbiAgaWQ6IGRlZmF1bHRJZCxcbiAgbWV0YToge30sXG59O1xuXG4vKlxuICogQ29tcGlsZSBhIHN0cmluZyBpbnRvIGEgdGVtcGxhdGUgamF2YXNjcmlwdCBzdHJpbmcuXG4gKlxuICogRXhhbXBsZSB1c2FnZTpcbiAqICAgICBpbXBvcnQgeyBwcmVjb21waWxlIH0gZnJvbSAnQGdsaW1tZXIvY29tcGlsZXInO1xuICogICAgIGltcG9ydCB7IHRlbXBsYXRlRmFjdG9yeSB9IGZyb20gJ2dsaW1lci1ydW50aW1lJztcbiAqICAgICBsZXQgdGVtcGxhdGVKcyA9IHByZWNvbXBpbGUoXCJIb3dkeSB7e25hbWV9fVwiKTtcbiAqICAgICBsZXQgZmFjdG9yeSA9IHRlbXBsYXRlRmFjdG9yeShuZXcgRnVuY3Rpb24oXCJyZXR1cm4gXCIgKyB0ZW1wbGF0ZUpzKSgpKTtcbiAqICAgICBsZXQgdGVtcGxhdGUgPSBmYWN0b3J5LmNyZWF0ZShlbnYpO1xuICpcbiAqIEBtZXRob2QgcHJlY29tcGlsZVxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBhIEdsaW1tZXIgdGVtcGxhdGUgc3RyaW5nXG4gKiBAcmV0dXJuIHtzdHJpbmd9IGEgdGVtcGxhdGUgamF2YXNjcmlwdCBzdHJpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByZWNvbXBpbGUoc3RyaW5nOiBzdHJpbmcsIG9wdGlvbnM/OiBQcmVjb21waWxlT3B0aW9ucyk6IFRlbXBsYXRlSmF2YXNjcmlwdDtcbmV4cG9ydCBmdW5jdGlvbiBwcmVjb21waWxlKFxuICBzdHJpbmc6IHN0cmluZyxcbiAgb3B0aW9uczogUHJlY29tcGlsZU9wdGlvbnMgPSBkZWZhdWx0T3B0aW9uc1xuKTogVGVtcGxhdGVKYXZhc2NyaXB0IHtcbiAgbGV0IGFzdCA9IHByZXByb2Nlc3Moc3RyaW5nLCBvcHRpb25zKTtcbiAgbGV0IHsgbWV0YSB9ID0gb3B0aW9ucztcbiAgbGV0IHsgYmxvY2sgfSA9IFRlbXBsYXRlQ29tcGlsZXIuY29tcGlsZShhc3QsIG9wdGlvbnMpO1xuICBsZXQgaWRGbiA9IG9wdGlvbnMuaWQgfHwgZGVmYXVsdElkO1xuICBsZXQgYmxvY2tKU09OID0gSlNPTi5zdHJpbmdpZnkoYmxvY2sudG9KU09OKCkpO1xuICBsZXQgdGVtcGxhdGVKU09OT2JqZWN0OiBTZXJpYWxpemVkVGVtcGxhdGVXaXRoTGF6eUJsb2NrPHVua25vd24+ID0ge1xuICAgIGlkOiBpZEZuKEpTT04uc3RyaW5naWZ5KG1ldGEpICsgYmxvY2tKU09OKSxcbiAgICBibG9jazogYmxvY2tKU09OLFxuICAgIG1ldGEsXG4gIH07XG5cbiAgLy8gSlNPTiBpcyBqYXZhc2NyaXB0XG4gIHJldHVybiBKU09OLnN0cmluZ2lmeSh0ZW1wbGF0ZUpTT05PYmplY3QpO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==