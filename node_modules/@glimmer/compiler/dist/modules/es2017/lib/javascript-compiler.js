import { assert } from '@glimmer/util';
import { Stack, DictSet } from '@glimmer/util';
import { isArgument, isAttribute, isFlushElement } from '@glimmer/wire-format';
export class Block {
    constructor() {
        this.statements = [];
    }
    push(statement) {
        this.statements.push(statement);
    }
}
export class InlineBlock extends Block {
    constructor(table) {
        super();
        this.table = table;
    }
    toJSON() {
        return {
            statements: this.statements,
            parameters: this.table.slots
        };
    }
}
export class NamedBlock extends InlineBlock {
    constructor(name, table) {
        super(table);
        this.name = name;
    }
}
export class TemplateBlock extends Block {
    constructor(symbolTable) {
        super();
        this.symbolTable = symbolTable;
        this.type = 'template';
        this.yields = new DictSet();
        this.named = new DictSet();
        this.blocks = [];
        this.hasEval = false;
    }
    push(statement) {
        this.statements.push(statement);
    }
    toJSON() {
        return {
            symbols: this.symbolTable.symbols,
            statements: this.statements,
            hasEval: this.hasEval
        };
    }
}
export class ComponentBlock extends Block {
    constructor(tag, table, selfClosing) {
        super();
        this.tag = tag;
        this.table = table;
        this.selfClosing = selfClosing;
        this.attributes = [];
        this.arguments = [];
        this.inParams = true;
        this.positionals = [];
        this.blocks = [];
    }
    push(statement) {
        if (this.inParams) {
            if (isFlushElement(statement)) {
                this.inParams = false;
            } else if (isArgument(statement)) {
                this.arguments.push(statement);
            } else if (isAttribute(statement)) {
                this.attributes.push(statement);
            } else {
                throw new Error('Compile Error: only parameters allowed before flush-element');
            }
        } else {
            this.statements.push(statement);
        }
    }
    pushBlock(name, block) {
        this.blocks.push([name, block]);
    }
    toJSON() {
        let blocks;
        let args = this.arguments;
        let keys = args.map(arg => arg[1]);
        let values = args.map(arg => arg[2]);
        if (this.selfClosing) {
            blocks = null;
        } else if (this.blocks.length > 0) {
            let keys = [];
            let values = [];
            for (let i = 0; i < this.blocks.length; i++) {
                let [key, value] = this.blocks[i];
                keys.push(key.slice(1));
                values.push(value);
            }
            blocks = [keys, values];
        } else {
            blocks = [['default'], [{
                statements: this.statements,
                parameters: this.table.slots
            }]];
        }
        return [this.tag, this.attributes, [keys, values], blocks];
    }
}
export class Template {
    constructor(symbols) {
        this.block = new TemplateBlock(symbols);
    }
    toJSON() {
        return this.block.toJSON();
    }
}
export default class JavaScriptCompiler {
    constructor(opcodes, symbols, options) {
        this.blocks = new Stack();
        this.values = [];
        this.opcodes = opcodes;
        this.template = new Template(symbols);
        this.options = options;
    }
    static process(opcodes, symbols, options) {
        let compiler = new JavaScriptCompiler(opcodes, symbols, options);
        return compiler.process();
    }
    get currentBlock() {
        return this.blocks.current;
    }
    get currentComponent() {
        let block = this.currentBlock;
        if (block instanceof ComponentBlock) {
            return block;
        } else {
            throw new Error(`Expected ComponentBlock on stack, found ${block.constructor.name}`);
        }
    }
    process() {
        this.opcodes.forEach(op => {
            let opcode = op[0];
            let arg = op[1];
            if (!this[opcode]) {
                throw new Error(`unimplemented ${opcode} on JavaScriptCompiler`);
            }
            this[opcode](arg);
        });
        return this.template;
    }
    /// Nesting
    startBlock(program) {
        this.startInlineBlock(program.symbols);
    }
    endBlock() {
        let block = this.endInlineBlock();
        this.template.block.blocks.push(block);
    }
    startProgram() {
        this.blocks.push(this.template.block);
    }
    endProgram() {}
    /// Statements
    text(content) {
        this.push([0 /* Text */, content]);
    }
    append(trusted) {
        this.push([1 /* Append */, this.popValue(), trusted]);
    }
    comment(value) {
        this.push([2 /* Comment */, value]);
    }
    modifier(name) {
        let params = this.popValue();
        let hash = this.popValue();
        this.push([3 /* Modifier */, name, params, hash]);
    }
    block([name, template, inverse]) {
        let params = this.popValue();
        let hash = this.popValue();
        let blocks = this.template.block.blocks;
        (false && assert(typeof template !== 'number' || blocks[template] !== null, 'missing block in the compiler'));
        (false && assert(typeof inverse !== 'number' || blocks[inverse] !== null, 'missing block in the compiler'));

        let namedBlocks;
        if (template === null && inverse === null) {
            namedBlocks = null;
        } else if (inverse === null) {
            namedBlocks = [['default'], [blocks[template]]];
        } else {
            namedBlocks = [['default', 'else'], [blocks[template], blocks[inverse]]];
        }
        this.push([4 /* Block */, name, params, hash, namedBlocks]);
    }
    openComponent(element) {
        let tag = this.options && this.options.customizeComponentName ? this.options.customizeComponentName(element.tag) : element.tag;
        let component = new ComponentBlock(tag, element.symbols, element.selfClosing);
        this.blocks.push(component);
    }
    openNamedBlock(element) {
        let block = new NamedBlock(element.tag, element.symbols);
        this.blocks.push(block);
    }
    openElement([element, simple]) {
        let tag = element.tag;
        if (element.blockParams.length > 0) {
            throw new Error(`Compile Error: <${element.tag}> is not a component and doesn't support block parameters`);
        } else {
            this.push([7 /* OpenElement */, tag, simple]);
        }
    }
    flushElement() {
        this.push([9 /* FlushElement */]);
    }
    closeComponent(_element) {
        let [tag, attrs, args, blocks] = this.endComponent();
        this.push([5 /* Component */, tag, attrs, args, blocks]);
    }
    closeNamedBlock(_element) {
        let { blocks } = this;
        let block = blocks.pop();
        this.currentComponent.pushBlock(block.name, block.toJSON());
    }
    closeDynamicComponent(_element) {
        let [, attrs, args, block] = this.endComponent();
        this.push([6 /* DynamicComponent */, this.popValue(), attrs, args, block]);
    }
    closeElement(_element) {
        this.push([10 /* CloseElement */]);
    }
    staticAttr([name, namespace]) {
        let value = this.popValue();
        this.push([11 /* StaticAttr */, name, value, namespace]);
    }
    dynamicAttr([name, namespace]) {
        let value = this.popValue();
        this.push([12 /* DynamicAttr */, name, value, namespace]);
    }
    componentAttr([name, namespace]) {
        let value = this.popValue();
        this.push([13 /* ComponentAttr */, name, value, namespace]);
    }
    trustingAttr([name, namespace]) {
        let value = this.popValue();
        this.push([19 /* TrustingDynamicAttr */, name, value, namespace]);
    }
    trustingComponentAttr([name, namespace]) {
        let value = this.popValue();
        this.push([20 /* TrustingComponentAttr */, name, value, namespace]);
    }
    staticArg(name) {
        let value = this.popValue();
        this.push([18 /* StaticArg */, name, value]);
    }
    dynamicArg(name) {
        let value = this.popValue();
        this.push([17 /* DynamicArg */, name, value]);
    }
    yield(to) {
        let params = this.popValue();
        this.push([15 /* Yield */, to, params]);
    }
    attrSplat(to) {
        // consume (and disregard) the value pushed for the
        // ...attributes attribute
        this.popValue();
        this.push([14 /* AttrSplat */, to]);
    }
    debugger(evalInfo) {
        this.push([21 /* Debugger */, evalInfo]);
        this.template.block.hasEval = true;
    }
    hasBlock(name) {
        this.pushValue([26 /* HasBlock */, name]);
    }
    hasBlockParams(name) {
        this.pushValue([27 /* HasBlockParams */, name]);
    }
    partial(evalInfo) {
        let params = this.popValue();
        this.push([16 /* Partial */, params[0], evalInfo]);
        this.template.block.hasEval = true;
    }
    /// Expressions
    literal(value) {
        if (value === undefined) {
            this.pushValue([28 /* Undefined */]);
        } else {
            this.pushValue(value);
        }
    }
    unknown(name) {
        this.pushValue([23 /* Unknown */, name]);
    }
    get([head, path]) {
        this.pushValue([24 /* Get */, head, path]);
    }
    maybeLocal(path) {
        this.pushValue([25 /* MaybeLocal */, path]);
    }
    concat() {
        this.pushValue([30 /* Concat */, this.popValue()]);
    }
    helper(name) {
        let params = this.popValue();
        let hash = this.popValue();
        this.pushValue([29 /* Helper */, name, params, hash]);
    }
    /// Stack Management Opcodes
    prepareArray(size) {
        let values = [];
        for (let i = 0; i < size; i++) {
            values.push(this.popValue());
        }
        this.pushValue(values);
    }
    prepareObject(size) {
        (false && assert(this.values.length >= size, `Expected ${size} values on the stack, found ${this.values.length}`));

        let keys = new Array(size);
        let values = new Array(size);
        for (let i = 0; i < size; i++) {
            keys[i] = this.popValue();
            values[i] = this.popValue();
        }
        this.pushValue([keys, values]);
    }
    /// Utilities
    endComponent() {
        let component = this.blocks.pop();
        (false && assert(component instanceof ComponentBlock, 'Compiler bug: endComponent() should end a component'));

        return component.toJSON();
    }
    startInlineBlock(symbols) {
        let block = new InlineBlock(symbols);
        this.blocks.push(block);
    }
    endInlineBlock() {
        let { blocks } = this;
        let block = blocks.pop();
        return block.toJSON();
    }
    push(args) {
        this.currentBlock.push(args);
    }
    pushValue(val) {
        this.values.push(val);
    }
    popValue() {
        (false && assert(this.values.length, 'No expression found on stack'));

        return this.values.pop();
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,