'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.THIS = undefined;

var _templateVisitor = require('./template-visitor');

var _templateVisitor2 = _interopRequireDefault(_templateVisitor);

var _javascriptCompiler = require('./javascript-compiler');

var _javascriptCompiler2 = _interopRequireDefault(_javascriptCompiler);

var _util = require('@glimmer/util');

var _syntax = require('@glimmer/syntax');

var _utils = require('./utils');

var _allocateSymbols = require('./allocate-symbols');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function isTrustedValue(value) {
    return value.escaped !== undefined && !value.escaped;
}
var THIS = exports.THIS = 0;

var TemplateCompiler = function () {
    function TemplateCompiler() {
        _classCallCheck(this, TemplateCompiler);

        this.templateId = 0;
        this.templateIds = [];
        this.opcodes = [];
        this.includeMeta = false;
    }

    TemplateCompiler.compile = function compile(ast, options) {
        var templateVisitor = new _templateVisitor2.default();
        templateVisitor.visit(ast);
        var compiler = new TemplateCompiler();
        var opcodes = compiler.process(templateVisitor.actions);
        var symbols = new _allocateSymbols.SymbolAllocator(opcodes).process();
        var out = _javascriptCompiler2.default.process(symbols, ast.symbols, options);
        if (false) {
            console.log('Template ->', out);
        }
        return out;
    };

    TemplateCompiler.prototype.process = function process(actions) {
        var _this = this;

        actions.forEach(function (_ref) {
            var name = _ref[0],
                args = _ref.slice(1);

            if (!_this[name]) {
                throw new Error('Unimplemented ' + name + ' on TemplateCompiler');
            }
            _this[name].apply(_this, args);
        });
        return this.opcodes;
    };

    TemplateCompiler.prototype.startProgram = function startProgram(_ref2) {
        var program = _ref2[0];

        this.opcode(['startProgram', program], program);
    };

    TemplateCompiler.prototype.endProgram = function endProgram() {
        this.opcode(['endProgram', null], null);
    };

    TemplateCompiler.prototype.startBlock = function startBlock(_ref3) {
        var program = _ref3[0];

        this.templateId++;
        this.opcode(['startBlock', program], program);
    };

    TemplateCompiler.prototype.endBlock = function endBlock() {
        this.templateIds.push(this.templateId - 1);
        this.opcode(['endBlock', null], null);
    };

    TemplateCompiler.prototype.text = function text(_ref4) {
        var action = _ref4[0];

        this.opcode(['text', action.chars], action);
    };

    TemplateCompiler.prototype.comment = function comment(_ref5) {
        var action = _ref5[0];

        this.opcode(['comment', action.value], action);
    };

    TemplateCompiler.prototype.openElement = function openElement(_ref6) {
        var action = _ref6[0];

        var attributes = action.attributes;
        var simple = true;
        for (var i = 0; i < attributes.length; i++) {
            var attr = attributes[i];
            if (attr.name === '...attributes') {
                simple = false;
                break;
            }
        }
        if (action.modifiers.length > 0) {
            simple = false;
        }
        var actionIsComponent = false;
        if (isDynamicComponent(action)) {
            var head = void 0,
                rest = void 0;

            var _action$tag$split = action.tag.split('.');

            head = _action$tag$split[0];
            rest = _action$tag$split.slice(1);

            if (head === 'this') {
                head = 0;
            }
            this.opcode(['get', [head, rest]]);
            this.opcode(['openComponent', action], action);
            actionIsComponent = true;
        } else if (isNamedBlock(action)) {
            this.opcode(['openNamedBlock', action], action);
        } else if (isComponent(action)) {
            this.opcode(['openComponent', action], action);
            actionIsComponent = true;
        } else {
            this.opcode(['openElement', [action, simple]], action);
        }
        if (!isNamedBlock(action)) {
            // TODO: Assert no attributes
            var typeAttr = null;
            var attrs = action.attributes;
            for (var _i = 0; _i < attrs.length; _i++) {
                if (attrs[_i].name === 'type') {
                    typeAttr = attrs[_i];
                    continue;
                }
                this.attribute([attrs[_i]], !simple || actionIsComponent);
            }
            if (typeAttr) {
                this.attribute([typeAttr], !simple || actionIsComponent);
            }
            for (var _i2 = 0; _i2 < action.modifiers.length; _i2++) {
                this.modifier([action.modifiers[_i2]]);
            }
            this.opcode(['flushElement', action], null);
        }
    };

    TemplateCompiler.prototype.closeElement = function closeElement(_ref7) {
        var action = _ref7[0];

        if (isNamedBlock(action)) {
            this.opcode(['closeNamedBlock', action]);
        } else if (isDynamicComponent(action)) {
            this.opcode(['closeDynamicComponent', action], action);
        } else if (isComponent(action)) {
            this.opcode(['closeComponent', action], action);
        } else {
            this.opcode(['closeElement', action], action);
        }
    };

    TemplateCompiler.prototype.attribute = function attribute(_ref8, isComponent) {
        var action = _ref8[0];
        var name = action.name,
            value = action.value;

        var namespace = (0, _utils.getAttrNamespace)(name);
        var isStatic = this.prepareAttributeValue(value);
        if (name.charAt(0) === '@') {
            // Arguments
            if (isStatic) {
                this.opcode(['staticArg', name], action);
            } else if (action.value.type === 'MustacheStatement') {
                this.opcode(['dynamicArg', name], action);
            } else {
                this.opcode(['dynamicArg', name], action);
            }
        } else {
            var isTrusting = isTrustedValue(value);
            if (isStatic && name === '...attributes') {
                this.opcode(['attrSplat', null], action);
            } else if (isStatic && !isComponent) {
                this.opcode(['staticAttr', [name, namespace]], action);
            } else if (isTrusting) {
                this.opcode([isComponent ? 'trustingComponentAttr' : 'trustingAttr', [name, namespace]], action);
            } else if (action.value.type === 'MustacheStatement') {
                this.opcode([isComponent ? 'componentAttr' : 'dynamicAttr', [name, namespace]], action);
            } else {
                this.opcode([isComponent ? 'componentAttr' : 'dynamicAttr', [name, namespace]], action);
            }
        }
    };

    TemplateCompiler.prototype.modifier = function modifier(_ref9) {
        var action = _ref9[0];

        assertIsSimplePath(action.path, action.loc, 'modifier');
        var parts = action.path.parts;

        this.prepareHelper(action);
        this.opcode(['modifier', parts[0]], action);
    };

    TemplateCompiler.prototype.mustache = function mustache(_ref10) {
        var action = _ref10[0];
        var path = action.path;

        if ((0, _syntax.isLiteral)(path)) {
            this.mustacheExpression(action);
            this.opcode(['append', !action.escaped], action);
        } else if (isYield(path)) {
            var to = assertValidYield(action);
            this.yield(to, action);
        } else if (isPartial(path)) {
            var params = assertValidPartial(action);
            this.partial(params, action);
        } else if (isDebugger(path)) {
            assertValidDebuggerUsage(action);
            this.debugger('debugger', action);
        } else {
            this.mustacheExpression(action);
            this.opcode(['append', !action.escaped], action);
        }
    };

    TemplateCompiler.prototype.block = function block(_ref11) {
        var action /*, index, count*/ = _ref11[0];

        this.prepareHelper(action);
        var templateId = this.templateIds.pop();
        var inverseId = action.inverse === null ? null : this.templateIds.pop();
        this.opcode(['block', [action.path.parts[0], templateId, inverseId]], action);
    };
    /// Internal actions, not found in the original processed actions


    TemplateCompiler.prototype.arg = function arg(_ref12) {
        var path = _ref12[0];

        var _path$parts = path.parts,
            head = _path$parts[0],
            rest = _path$parts.slice(1);

        this.opcode(['get', ['@' + head, rest]], path);
    };

    TemplateCompiler.prototype.mustacheExpression = function mustacheExpression(expr) {
        var path = expr.path;

        if ((0, _syntax.isLiteral)(path)) {
            this.opcode(['literal', path.value], expr);
        } else if (isBuiltInHelper(path)) {
            this.builtInHelper(expr);
        } else if (isArg(path)) {
            this.arg([path]);
        } else if (isHelperInvocation(expr)) {
            this.prepareHelper(expr);
            this.opcode(['helper', path.parts[0]], expr);
        } else if (path.this) {
            this.opcode(['get', [0, path.parts]], expr);
        } else {
            var _path$parts2 = path.parts,
                head = _path$parts2[0],
                parts = _path$parts2.slice(1);

            this.opcode(['maybeGet', [head, parts]], expr);
        }
        // } else if (isLocal(path, this.symbols)) {
        //   let [head, ...parts] = path.parts;
        //   this.opcode(['get', [head, parts]], expr);
        // } else if (isSimplePath(path)) {
        //   this.opcode(['unknown', path.parts[0]], expr);
        // } else {
        //   this.opcode(['maybeLocal', path.parts], expr);
        // }
    };
    /// Internal Syntax


    TemplateCompiler.prototype.yield = function _yield(to, action) {
        this.prepareParams(action.params);
        this.opcode(['yield', to], action);
    };

    TemplateCompiler.prototype.debugger = function _debugger(_name, action) {
        this.opcode(['debugger', null], action);
    };

    TemplateCompiler.prototype.hasBlock = function hasBlock(name, action) {
        this.opcode(['hasBlock', name], action);
    };

    TemplateCompiler.prototype.hasBlockParams = function hasBlockParams(name, action) {
        this.opcode(['hasBlockParams', name], action);
    };

    TemplateCompiler.prototype.partial = function partial(_params, action) {
        this.prepareParams(action.params);
        this.opcode(['partial', null], action);
    };

    TemplateCompiler.prototype.builtInHelper = function builtInHelper(expr) {
        var path = expr.path;

        if (isHasBlock(path)) {
            var name = assertValidHasBlockUsage(expr.path.original, expr);
            this.hasBlock(name, expr);
        } else if (isHasBlockParams(path)) {
            var _name2 = assertValidHasBlockUsage(expr.path.original, expr);
            this.hasBlockParams(_name2, expr);
        }
    };
    /// Expressions, invoked recursively from prepareParams and prepareHash


    TemplateCompiler.prototype.SubExpression = function SubExpression(expr) {
        if (isBuiltInHelper(expr.path)) {
            this.builtInHelper(expr);
        } else {
            this.prepareHelper(expr);
            this.opcode(['helper', expr.path.parts[0]], expr);
        }
    };

    TemplateCompiler.prototype.PathExpression = function PathExpression(expr) {
        if (expr.data) {
            this.arg([expr]);
        } else {
            var _expr$parts = expr.parts,
                head = _expr$parts[0],
                rest = _expr$parts.slice(1);

            if (expr.this) {
                this.opcode(['get', [0, expr.parts]], expr);
            } else {
                this.opcode(['get', [head, rest]], expr);
            }
        }
    };

    TemplateCompiler.prototype.StringLiteral = function StringLiteral(action) {
        this.opcode(['literal', action.value], action);
    };

    TemplateCompiler.prototype.BooleanLiteral = function BooleanLiteral(action) {
        this.opcode(['literal', action.value], action);
    };

    TemplateCompiler.prototype.NumberLiteral = function NumberLiteral(action) {
        this.opcode(['literal', action.value], action);
    };

    TemplateCompiler.prototype.NullLiteral = function NullLiteral(action) {
        this.opcode(['literal', action.value], action);
    };

    TemplateCompiler.prototype.UndefinedLiteral = function UndefinedLiteral(action) {
        this.opcode(['literal', action.value], action);
    };
    /// Utilities


    TemplateCompiler.prototype.opcode = function opcode(_opcode) {
        var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

        // TODO: This doesn't really work
        if (this.includeMeta && action) {
            _opcode.push(this.meta(action));
        }
        this.opcodes.push(_opcode);
    };

    TemplateCompiler.prototype.prepareHelper = function prepareHelper(expr) {
        assertIsSimplePath(expr.path, expr.loc, 'helper');
        var params = expr.params,
            hash = expr.hash;

        this.prepareHash(hash);
        this.prepareParams(params);
    };

    TemplateCompiler.prototype.prepareParams = function prepareParams(params) {
        if (!params.length) {
            this.opcode(['literal', null], null);
            return;
        }
        for (var i = params.length - 1; i >= 0; i--) {
            var param = params[i];
            false && (0, _util.assert)(this[param.type], 'Unimplemented ' + param.type + ' on TemplateCompiler');

            this[param.type](param);
        }
        this.opcode(['prepareArray', params.length], null);
    };

    TemplateCompiler.prototype.prepareHash = function prepareHash(hash) {
        var pairs = hash.pairs;
        if (!pairs.length) {
            this.opcode(['literal', null], null);
            return;
        }
        for (var i = pairs.length - 1; i >= 0; i--) {
            var _pairs$i = pairs[i],
                key = _pairs$i.key,
                value = _pairs$i.value;

            false && (0, _util.assert)(this[value.type], 'Unimplemented ' + value.type + ' on TemplateCompiler');

            this[value.type](value);
            this.opcode(['literal', key], null);
        }
        this.opcode(['prepareObject', pairs.length], null);
    };

    TemplateCompiler.prototype.prepareAttributeValue = function prepareAttributeValue(value) {
        // returns the static value if the value is static
        switch (value.type) {
            case 'TextNode':
                this.opcode(['literal', value.chars], value);
                return true;
            case 'MustacheStatement':
                this.attributeMustache([value]);
                return false;
            case 'ConcatStatement':
                this.prepareConcatParts(value.parts);
                this.opcode(['concat', null], value);
                return false;
        }
    };

    TemplateCompiler.prototype.prepareConcatParts = function prepareConcatParts(parts) {
        for (var i = parts.length - 1; i >= 0; i--) {
            var part = parts[i];
            if (part.type === 'MustacheStatement') {
                this.attributeMustache([part]);
            } else if (part.type === 'TextNode') {
                this.opcode(['literal', part.chars], null);
            }
        }
        this.opcode(['prepareArray', parts.length], null);
    };

    TemplateCompiler.prototype.attributeMustache = function attributeMustache(_ref13) {
        var action = _ref13[0];

        this.mustacheExpression(action);
    };

    TemplateCompiler.prototype.meta = function meta(node) {
        var loc = node.loc;
        if (!loc) {
            return [];
        }
        var source = loc.source,
            start = loc.start,
            end = loc.end;

        return ['loc', [source || null, [start.line, start.column], [end.line, end.column]]];
    };

    return TemplateCompiler;
}();

exports.default = TemplateCompiler;


function isHelperInvocation(mustache) {
    return mustache.params && mustache.params.length > 0 || mustache.hash && mustache.hash.pairs.length > 0;
}
function isSimplePath(_ref14) {
    var parts = _ref14.parts;

    return parts.length === 1;
}
function isYield(path) {
    return path.original === 'yield';
}
function isPartial(path) {
    return path.original === 'partial';
}
function isDebugger(path) {
    return path.original === 'debugger';
}
function isHasBlock(path) {
    return path.original === 'has-block';
}
function isHasBlockParams(path) {
    return path.original === 'has-block-params';
}
function isBuiltInHelper(path) {
    return isHasBlock(path) || isHasBlockParams(path);
}
function isArg(path) {
    return !!path['data'];
}
function isDynamicComponent(element) {
    var open = element.tag.charAt(0);

    var _element$tag$split = element.tag.split('.'),
        maybeLocal = _element$tag$split[0];

    var isNamedArgument = open === '@';
    var isLocal = element.symbols.has(maybeLocal);
    var isThisPath = element.tag.indexOf('this.') === 0;
    return isLocal || isNamedArgument || isThisPath;
}
function isComponent(element) {
    var open = element.tag.charAt(0);
    var isPath = element.tag.indexOf('.') > -1;
    var isUpperCase = open === open.toUpperCase() && open !== open.toLowerCase();
    return isUpperCase && !isPath || isDynamicComponent(element);
}
function isNamedBlock(element) {
    var open = element.tag.charAt(0);
    return open === ':';
}
function assertIsSimplePath(path, loc, context) {
    if (!isSimplePath(path)) {
        throw new _syntax.SyntaxError('`' + path.original + '` is not a valid name for a ' + context + ' on line ' + loc.start.line + '.', path.loc);
    }
}
function assertValidYield(statement) {
    var pairs = statement.hash.pairs;

    if (pairs.length === 1 && pairs[0].key !== 'to' || pairs.length > 1) {
        throw new _syntax.SyntaxError('yield only takes a single named argument: \'to\'', statement.loc);
    } else if (pairs.length === 1 && pairs[0].value.type !== 'StringLiteral') {
        throw new _syntax.SyntaxError('you can only yield to a literal value', statement.loc);
    } else if (pairs.length === 0) {
        return 'default';
    } else {
        return pairs[0].value.value;
    }
}
function assertValidPartial(statement) {
    var params = statement.params,
        hash = statement.hash,
        escaped = statement.escaped,
        loc = statement.loc;

    if (params && params.length !== 1) {
        throw new _syntax.SyntaxError('Partial found with no arguments. You must specify a template name. (on line ' + loc.start.line + ')', statement.loc);
    } else if (hash && hash.pairs.length > 0) {
        throw new _syntax.SyntaxError('partial does not take any named arguments (on line ' + loc.start.line + ')', statement.loc);
    } else if (!escaped) {
        throw new _syntax.SyntaxError('{{{partial ...}}} is not supported, please use {{partial ...}} instead (on line ' + loc.start.line + ')', statement.loc);
    }
    return params;
}
function assertValidHasBlockUsage(type, call) {
    var params = call.params,
        hash = call.hash,
        loc = call.loc;

    if (hash && hash.pairs.length > 0) {
        throw new _syntax.SyntaxError(type + ' does not take any named arguments', call.loc);
    }
    if (params.length === 0) {
        return 'default';
    } else if (params.length === 1) {
        var param = params[0];
        if (param.type === 'StringLiteral') {
            return param.value;
        } else {
            throw new _syntax.SyntaxError('you can only yield to a literal value (on line ' + loc.start.line + ')', call.loc);
        }
    } else {
        throw new _syntax.SyntaxError(type + ' only takes a single positional argument (on line ' + loc.start.line + ')', call.loc);
    }
}
function assertValidDebuggerUsage(statement) {
    var params = statement.params,
        hash = statement.hash;

    if (hash && hash.pairs.length > 0) {
        throw new _syntax.SyntaxError('debugger does not take any named arguments', statement.loc);
    }
    if (params.length === 0) {
        return 'default';
    } else {
        throw new _syntax.SyntaxError('debugger does not take any positional arguments', statement.loc);
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,