define('@glimmer/compiler', ['exports', '@glimmer/util', '@glimmer/wire-format', '@glimmer/syntax'], function (exports, util, wireFormat, syntax) { 'use strict';

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    var SymbolTable = function () {
        function SymbolTable() {
            _classCallCheck(this, SymbolTable);
        }

        SymbolTable.top = function top() {
            return new ProgramSymbolTable();
        };

        SymbolTable.prototype.child = function child(locals) {
            var _this = this;

            var symbols = locals.map(function (name) {
                return _this.allocate(name);
            });
            return new BlockSymbolTable(this, locals, symbols);
        };

        return SymbolTable;
    }();
    var ProgramSymbolTable = function (_SymbolTable) {
        _inherits(ProgramSymbolTable, _SymbolTable);

        function ProgramSymbolTable() {
            _classCallCheck(this, ProgramSymbolTable);

            var _this2 = _possibleConstructorReturn(this, _SymbolTable.apply(this, arguments));

            _this2.symbols = [];
            _this2.size = 1;
            _this2.named = util.dict();
            _this2.blocks = util.dict();
            return _this2;
        }

        ProgramSymbolTable.prototype.has = function has(_name) {
            return false;
        };

        ProgramSymbolTable.prototype.get = function get(_name) {
            throw util.unreachable();
        };

        ProgramSymbolTable.prototype.getLocalsMap = function getLocalsMap() {
            return {};
        };

        ProgramSymbolTable.prototype.getEvalInfo = function getEvalInfo() {
            return [];
        };

        ProgramSymbolTable.prototype.allocateNamed = function allocateNamed(name) {
            var named = this.named[name];
            if (!named) {
                named = this.named[name] = this.allocate(name);
            }
            return named;
        };

        ProgramSymbolTable.prototype.allocateBlock = function allocateBlock(name) {
            if (name === 'inverse') {
                name = 'else';
            }
            var block = this.blocks[name];
            if (!block) {
                block = this.blocks[name] = this.allocate('&' + name);
            }
            return block;
        };

        ProgramSymbolTable.prototype.allocate = function allocate(identifier) {
            this.symbols.push(identifier);
            return this.size++;
        };

        return ProgramSymbolTable;
    }(SymbolTable);
    var BlockSymbolTable = function (_SymbolTable2) {
        _inherits(BlockSymbolTable, _SymbolTable2);

        function BlockSymbolTable(parent, symbols, slots) {
            _classCallCheck(this, BlockSymbolTable);

            var _this3 = _possibleConstructorReturn(this, _SymbolTable2.call(this));

            _this3.parent = parent;
            _this3.symbols = symbols;
            _this3.slots = slots;
            return _this3;
        }

        BlockSymbolTable.prototype.has = function has(name) {
            return this.symbols.indexOf(name) !== -1 || this.parent.has(name);
        };

        BlockSymbolTable.prototype.get = function get(name) {
            var slot = this.symbols.indexOf(name);
            return slot === -1 ? this.parent.get(name) : this.slots[slot];
        };

        BlockSymbolTable.prototype.getLocalsMap = function getLocalsMap() {
            var _this4 = this;

            var dict = this.parent.getLocalsMap();
            this.symbols.forEach(function (symbol) {
                return dict[symbol] = _this4.get(symbol);
            });
            return dict;
        };

        BlockSymbolTable.prototype.getEvalInfo = function getEvalInfo() {
            var locals = this.getLocalsMap();
            return Object.keys(locals).map(function (symbol) {
                return locals[symbol];
            });
        };

        BlockSymbolTable.prototype.allocateNamed = function allocateNamed(name) {
            return this.parent.allocateNamed(name);
        };

        BlockSymbolTable.prototype.allocateBlock = function allocateBlock(name) {
            return this.parent.allocateBlock(name);
        };

        BlockSymbolTable.prototype.allocate = function allocate(identifier) {
            return this.parent.allocate(identifier);
        };

        return BlockSymbolTable;
    }(SymbolTable);
    /**
     * Takes in an AST and outputs a list of actions to be consumed
     * by a compiler. For example, the template
     *
     *     foo{{bar}}<div>baz</div>
     *
     * produces the actions
     *
     *     [['startProgram', [programNode, 0]],
     *      ['text', [textNode, 0, 3]],
     *      ['mustache', [mustacheNode, 1, 3]],
     *      ['openElement', [elementNode, 2, 3, 0]],
     *      ['text', [textNode, 0, 1]],
     *      ['closeElement', [elementNode, 2, 3],
     *      ['endProgram', [programNode]]]
     *
     * This visitor walks the AST depth first and backwards. As
     * a result the bottom-most child template will appear at the
     * top of the actions list whereas the root template will appear
     * at the bottom of the list. For example,
     *
     *     <div>{{#if}}foo{{else}}bar<b></b>{{/if}}</div>
     *
     * produces the actions
     *
     *     [['startProgram', [programNode, 0]],
     *      ['text', [textNode, 0, 2, 0]],
     *      ['openElement', [elementNode, 1, 2, 0]],
     *      ['closeElement', [elementNode, 1, 2]],
     *      ['endProgram', [programNode]],
     *      ['startProgram', [programNode, 0]],
     *      ['text', [textNode, 0, 1]],
     *      ['endProgram', [programNode]],
     *      ['startProgram', [programNode, 2]],
     *      ['openElement', [elementNode, 0, 1, 1]],
     *      ['block', [blockNode, 0, 1]],
     *      ['closeElement', [elementNode, 0, 1]],
     *      ['endProgram', [programNode]]]
     *
     * The state of the traversal is maintained by a stack of frames.
     * Whenever a node with children is entered (either a ProgramNode
     * or an ElementNode) a frame is pushed onto the stack. The frame
     * contains information about the state of the traversal of that
     * node. For example,
     *
     *   - index of the current child node being visited
     *   - the number of mustaches contained within its child nodes
     *   - the list of actions generated by its child nodes
     */

    var Frame = function Frame() {
        _classCallCheck(this, Frame);

        this.parentNode = null;
        this.children = null;
        this.childIndex = null;
        this.childCount = null;
        this.childTemplateCount = 0;
        this.mustacheCount = 0;
        this.actions = [];
        this.blankChildTextNodes = null;
        this.symbols = null;
    };

    var TemplateVisitor = function () {
        function TemplateVisitor() {
            _classCallCheck(this, TemplateVisitor);

            this.frameStack = [];
            this.actions = [];
            this.programDepth = -1;
        }

        TemplateVisitor.prototype.visit = function visit(node) {
            this[node.type](node);
        };
        // Traversal methods


        TemplateVisitor.prototype.Block = function Block(program) {
            return this.anyBlock(program);
        };

        TemplateVisitor.prototype.Template = function Template(program) {
            return this.anyBlock(program);
        };

        TemplateVisitor.prototype.anyBlock = function anyBlock(program) {
            var _actions;

            this.programDepth++;
            var parentFrame = this.getCurrentFrame();
            var programFrame = this.pushFrame();
            if (!parentFrame) {
                program.symbols = SymbolTable.top();
            } else {
                program.symbols = parentFrame.symbols.child(program.blockParams);
            }
            var startType = void 0,
                endType = void 0;
            if (this.programDepth === 0) {
                startType = 'startProgram';
                endType = 'endProgram';
            } else {
                startType = 'startBlock';
                endType = 'endBlock';
            }
            programFrame.parentNode = program;
            programFrame.children = program.body;
            programFrame.childCount = program.body.length;
            programFrame.blankChildTextNodes = [];
            programFrame.actions.push([endType, [program, this.programDepth]]);
            programFrame.symbols = program['symbols'];
            for (var i = program.body.length - 1; i >= 0; i--) {
                programFrame.childIndex = i;
                this.visit(program.body[i]);
            }
            programFrame.actions.push([startType, [program, programFrame.childTemplateCount, programFrame.blankChildTextNodes.reverse()]]);
            this.popFrame();
            this.programDepth--;
            // Push the completed template into the global actions list
            if (parentFrame) {
                parentFrame.childTemplateCount++;
            }
            (_actions = this.actions).push.apply(_actions, programFrame.actions.reverse());
        };

        TemplateVisitor.prototype.ElementNode = function ElementNode(element) {
            var _parentFrame$actions;

            var parentFrame = this.currentFrame;
            var elementFrame = this.pushFrame();
            elementFrame.parentNode = element;
            elementFrame.children = element.children;
            elementFrame.childCount = element.children.length;
            elementFrame.mustacheCount += element.modifiers.length;
            elementFrame.blankChildTextNodes = [];
            elementFrame.symbols = element.symbols = parentFrame.symbols.child(element.blockParams);
            var actionArgs = [element, parentFrame.childIndex, parentFrame.childCount];
            elementFrame.actions.push(['closeElement', actionArgs]);
            for (var i = element.attributes.length - 1; i >= 0; i--) {
                this.visit(element.attributes[i]);
            }
            for (var _i = element.children.length - 1; _i >= 0; _i--) {
                elementFrame.childIndex = _i;
                this.visit(element.children[_i]);
            }
            var open = ['openElement', [].concat(actionArgs, [elementFrame.mustacheCount, elementFrame.blankChildTextNodes.reverse()])];
            elementFrame.actions.push(open);
            this.popFrame();
            // Propagate the element's frame state to the parent frame
            if (elementFrame.mustacheCount > 0) {
                parentFrame.mustacheCount++;
            }
            parentFrame.childTemplateCount += elementFrame.childTemplateCount;
            (_parentFrame$actions = parentFrame.actions).push.apply(_parentFrame$actions, elementFrame.actions);
        };

        TemplateVisitor.prototype.AttrNode = function AttrNode(attr) {
            if (attr.value.type !== 'TextNode') {
                this.currentFrame.mustacheCount++;
            }
        };

        TemplateVisitor.prototype.TextNode = function TextNode(text) {
            var frame = this.currentFrame;
            if (text.chars === '') {
                frame.blankChildTextNodes.push(domIndexOf(frame.children, text));
            }
            frame.actions.push(['text', [text, frame.childIndex, frame.childCount]]);
        };

        TemplateVisitor.prototype.BlockStatement = function BlockStatement(node) {
            var frame = this.currentFrame;
            frame.mustacheCount++;
            frame.actions.push(['block', [node, frame.childIndex, frame.childCount]]);
            if (node.inverse) {
                this.visit(node.inverse);
            }
            if (node.program) {
                this.visit(node.program);
            }
        };

        TemplateVisitor.prototype.PartialStatement = function PartialStatement(node) {
            var frame = this.currentFrame;
            frame.mustacheCount++;
            frame.actions.push(['mustache', [node, frame.childIndex, frame.childCount]]);
        };

        TemplateVisitor.prototype.CommentStatement = function CommentStatement(text) {
            var frame = this.currentFrame;
            frame.actions.push(['comment', [text, frame.childIndex, frame.childCount]]);
        };

        TemplateVisitor.prototype.MustacheCommentStatement = function MustacheCommentStatement() {
            // Intentional empty: Handlebars comments should not affect output.
        };

        TemplateVisitor.prototype.MustacheStatement = function MustacheStatement(mustache) {
            var frame = this.currentFrame;
            frame.mustacheCount++;
            frame.actions.push(['mustache', [mustache, frame.childIndex, frame.childCount]]);
        };
        // Frame helpers


        TemplateVisitor.prototype.getCurrentFrame = function getCurrentFrame() {
            return this.frameStack[this.frameStack.length - 1];
        };

        TemplateVisitor.prototype.pushFrame = function pushFrame() {
            var frame = new Frame();
            this.frameStack.push(frame);
            return frame;
        };

        TemplateVisitor.prototype.popFrame = function popFrame() {
            return this.frameStack.pop();
        };

        _createClass(TemplateVisitor, [{
            key: 'currentFrame',
            get: function get() {
                return this.getCurrentFrame();
            }
        }]);

        return TemplateVisitor;
    }();
    function domIndexOf(nodes, domNode) {
        var index = -1;
        for (var i = 0; i < nodes.length; i++) {
            var node = nodes[i];
            if (node.type !== 'TextNode' && node.type !== 'ElementNode') {
                continue;
            } else {
                index++;
            }
            if (node === domNode) {
                return index;
            }
        }
        return -1;
    }

    var _createClass$1 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    function _defaults$1(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

    function _possibleConstructorReturn$1(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits$1(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$1(subClass, superClass); }

    function _classCallCheck$1(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    var Block = function () {
        function Block() {
            _classCallCheck$1(this, Block);

            this.statements = [];
        }

        Block.prototype.push = function push(statement) {
            this.statements.push(statement);
        };

        return Block;
    }();
    var InlineBlock = function (_Block) {
        _inherits$1(InlineBlock, _Block);

        function InlineBlock(table) {
            _classCallCheck$1(this, InlineBlock);

            var _this = _possibleConstructorReturn$1(this, _Block.call(this));

            _this.table = table;
            return _this;
        }

        InlineBlock.prototype.toJSON = function toJSON() {
            return {
                statements: this.statements,
                parameters: this.table.slots
            };
        };

        return InlineBlock;
    }(Block);
    var NamedBlock = function (_InlineBlock) {
        _inherits$1(NamedBlock, _InlineBlock);

        function NamedBlock(name, table) {
            _classCallCheck$1(this, NamedBlock);

            var _this2 = _possibleConstructorReturn$1(this, _InlineBlock.call(this, table));

            _this2.name = name;
            return _this2;
        }

        return NamedBlock;
    }(InlineBlock);
    var TemplateBlock = function (_Block2) {
        _inherits$1(TemplateBlock, _Block2);

        function TemplateBlock(symbolTable) {
            _classCallCheck$1(this, TemplateBlock);

            var _this3 = _possibleConstructorReturn$1(this, _Block2.call(this));

            _this3.symbolTable = symbolTable;
            _this3.type = 'template';
            _this3.yields = new util.DictSet();
            _this3.named = new util.DictSet();
            _this3.blocks = [];
            _this3.hasEval = false;
            return _this3;
        }

        TemplateBlock.prototype.push = function push(statement) {
            this.statements.push(statement);
        };

        TemplateBlock.prototype.toJSON = function toJSON() {
            return {
                symbols: this.symbolTable.symbols,
                statements: this.statements,
                hasEval: this.hasEval
            };
        };

        return TemplateBlock;
    }(Block);
    var ComponentBlock = function (_Block3) {
        _inherits$1(ComponentBlock, _Block3);

        function ComponentBlock(tag, table, selfClosing) {
            _classCallCheck$1(this, ComponentBlock);

            var _this4 = _possibleConstructorReturn$1(this, _Block3.call(this));

            _this4.tag = tag;
            _this4.table = table;
            _this4.selfClosing = selfClosing;
            _this4.attributes = [];
            _this4.arguments = [];
            _this4.inParams = true;
            _this4.positionals = [];
            _this4.blocks = [];
            return _this4;
        }

        ComponentBlock.prototype.push = function push(statement) {
            if (this.inParams) {
                if (wireFormat.isFlushElement(statement)) {
                    this.inParams = false;
                } else if (wireFormat.isArgument(statement)) {
                    this.arguments.push(statement);
                } else if (wireFormat.isAttribute(statement)) {
                    this.attributes.push(statement);
                } else {
                    throw new Error('Compile Error: only parameters allowed before flush-element');
                }
            } else {
                this.statements.push(statement);
            }
        };

        ComponentBlock.prototype.pushBlock = function pushBlock(name, block) {
            this.blocks.push([name, block]);
        };

        ComponentBlock.prototype.toJSON = function toJSON() {
            var blocks = void 0;
            var args = this.arguments;
            var keys = args.map(function (arg) {
                return arg[1];
            });
            var values = args.map(function (arg) {
                return arg[2];
            });
            if (this.selfClosing) {
                blocks = null;
            } else if (this.blocks.length > 0) {
                var _keys = [];
                var _values = [];
                for (var i = 0; i < this.blocks.length; i++) {
                    var _blocks$i = this.blocks[i],
                        key = _blocks$i[0],
                        value = _blocks$i[1];

                    _keys.push(key.slice(1));
                    _values.push(value);
                }
                blocks = [_keys, _values];
            } else {
                blocks = [['default'], [{
                    statements: this.statements,
                    parameters: this.table.slots
                }]];
            }
            return [this.tag, this.attributes, [keys, values], blocks];
        };

        return ComponentBlock;
    }(Block);
    var Template = function () {
        function Template(symbols) {
            _classCallCheck$1(this, Template);

            this.block = new TemplateBlock(symbols);
        }

        Template.prototype.toJSON = function toJSON() {
            return this.block.toJSON();
        };

        return Template;
    }();

    var JavaScriptCompiler = function () {
        function JavaScriptCompiler(opcodes, symbols, options) {
            _classCallCheck$1(this, JavaScriptCompiler);

            this.blocks = new util.Stack();
            this.values = [];
            this.opcodes = opcodes;
            this.template = new Template(symbols);
            this.options = options;
        }

        JavaScriptCompiler.process = function process(opcodes, symbols, options) {
            var compiler = new JavaScriptCompiler(opcodes, symbols, options);
            return compiler.process();
        };

        JavaScriptCompiler.prototype.process = function process() {
            var _this5 = this;

            this.opcodes.forEach(function (op) {
                var opcode = op[0];
                var arg = op[1];
                if (!_this5[opcode]) {
                    throw new Error('unimplemented ' + opcode + ' on JavaScriptCompiler');
                }
                _this5[opcode](arg);
            });
            return this.template;
        };
        /// Nesting


        JavaScriptCompiler.prototype.startBlock = function startBlock(program) {
            this.startInlineBlock(program.symbols);
        };

        JavaScriptCompiler.prototype.endBlock = function endBlock() {
            var block = this.endInlineBlock();
            this.template.block.blocks.push(block);
        };

        JavaScriptCompiler.prototype.startProgram = function startProgram() {
            this.blocks.push(this.template.block);
        };

        JavaScriptCompiler.prototype.endProgram = function endProgram() {};
        /// Statements


        JavaScriptCompiler.prototype.text = function text(content) {
            this.push([0 /* Text */, content]);
        };

        JavaScriptCompiler.prototype.append = function append(trusted) {
            this.push([1 /* Append */, this.popValue(), trusted]);
        };

        JavaScriptCompiler.prototype.comment = function comment(value) {
            this.push([2 /* Comment */, value]);
        };

        JavaScriptCompiler.prototype.modifier = function modifier(name) {
            var params = this.popValue();
            var hash = this.popValue();
            this.push([3 /* Modifier */, name, params, hash]);
        };

        JavaScriptCompiler.prototype.block = function block(_ref) {
            var name = _ref[0],
                template = _ref[1],
                inverse = _ref[2];

            var params = this.popValue();
            var hash = this.popValue();
            var blocks = this.template.block.blocks;

            var namedBlocks = void 0;
            if (template === null && inverse === null) {
                namedBlocks = null;
            } else if (inverse === null) {
                namedBlocks = [['default'], [blocks[template]]];
            } else {
                namedBlocks = [['default', 'else'], [blocks[template], blocks[inverse]]];
            }
            this.push([4 /* Block */, name, params, hash, namedBlocks]);
        };

        JavaScriptCompiler.prototype.openComponent = function openComponent(element) {
            var tag = this.options && this.options.customizeComponentName ? this.options.customizeComponentName(element.tag) : element.tag;
            var component = new ComponentBlock(tag, element.symbols, element.selfClosing);
            this.blocks.push(component);
        };

        JavaScriptCompiler.prototype.openNamedBlock = function openNamedBlock(element) {
            var block = new NamedBlock(element.tag, element.symbols);
            this.blocks.push(block);
        };

        JavaScriptCompiler.prototype.openElement = function openElement(_ref2) {
            var element = _ref2[0],
                simple = _ref2[1];

            var tag = element.tag;
            if (element.blockParams.length > 0) {
                throw new Error('Compile Error: <' + element.tag + '> is not a component and doesn\'t support block parameters');
            } else {
                this.push([7 /* OpenElement */, tag, simple]);
            }
        };

        JavaScriptCompiler.prototype.flushElement = function flushElement() {
            this.push([9 /* FlushElement */]);
        };

        JavaScriptCompiler.prototype.closeComponent = function closeComponent(_element) {
            var _endComponent = this.endComponent(),
                tag = _endComponent[0],
                attrs = _endComponent[1],
                args = _endComponent[2],
                blocks = _endComponent[3];

            this.push([5 /* Component */, tag, attrs, args, blocks]);
        };

        JavaScriptCompiler.prototype.closeNamedBlock = function closeNamedBlock(_element) {
            var blocks = this.blocks;

            var block = blocks.pop();
            this.currentComponent.pushBlock(block.name, block.toJSON());
        };

        JavaScriptCompiler.prototype.closeDynamicComponent = function closeDynamicComponent(_element) {
            var _endComponent2 = this.endComponent(),
                attrs = _endComponent2[1],
                args = _endComponent2[2],
                block = _endComponent2[3];

            this.push([6 /* DynamicComponent */, this.popValue(), attrs, args, block]);
        };

        JavaScriptCompiler.prototype.closeElement = function closeElement(_element) {
            this.push([10 /* CloseElement */]);
        };

        JavaScriptCompiler.prototype.staticAttr = function staticAttr(_ref3) {
            var name = _ref3[0],
                namespace = _ref3[1];

            var value = this.popValue();
            this.push([11 /* StaticAttr */, name, value, namespace]);
        };

        JavaScriptCompiler.prototype.dynamicAttr = function dynamicAttr(_ref4) {
            var name = _ref4[0],
                namespace = _ref4[1];

            var value = this.popValue();
            this.push([12 /* DynamicAttr */, name, value, namespace]);
        };

        JavaScriptCompiler.prototype.componentAttr = function componentAttr(_ref5) {
            var name = _ref5[0],
                namespace = _ref5[1];

            var value = this.popValue();
            this.push([13 /* ComponentAttr */, name, value, namespace]);
        };

        JavaScriptCompiler.prototype.trustingAttr = function trustingAttr(_ref6) {
            var name = _ref6[0],
                namespace = _ref6[1];

            var value = this.popValue();
            this.push([19 /* TrustingDynamicAttr */, name, value, namespace]);
        };

        JavaScriptCompiler.prototype.trustingComponentAttr = function trustingComponentAttr(_ref7) {
            var name = _ref7[0],
                namespace = _ref7[1];

            var value = this.popValue();
            this.push([20 /* TrustingComponentAttr */, name, value, namespace]);
        };

        JavaScriptCompiler.prototype.staticArg = function staticArg(name) {
            var value = this.popValue();
            this.push([18 /* StaticArg */, name, value]);
        };

        JavaScriptCompiler.prototype.dynamicArg = function dynamicArg(name) {
            var value = this.popValue();
            this.push([17 /* DynamicArg */, name, value]);
        };

        JavaScriptCompiler.prototype.yield = function _yield(to) {
            var params = this.popValue();
            this.push([15 /* Yield */, to, params]);
        };

        JavaScriptCompiler.prototype.attrSplat = function attrSplat(to) {
            // consume (and disregard) the value pushed for the
            // ...attributes attribute
            this.popValue();
            this.push([14 /* AttrSplat */, to]);
        };

        JavaScriptCompiler.prototype.debugger = function _debugger(evalInfo) {
            this.push([21 /* Debugger */, evalInfo]);
            this.template.block.hasEval = true;
        };

        JavaScriptCompiler.prototype.hasBlock = function hasBlock(name) {
            this.pushValue([26 /* HasBlock */, name]);
        };

        JavaScriptCompiler.prototype.hasBlockParams = function hasBlockParams(name) {
            this.pushValue([27 /* HasBlockParams */, name]);
        };

        JavaScriptCompiler.prototype.partial = function partial(evalInfo) {
            var params = this.popValue();
            this.push([16 /* Partial */, params[0], evalInfo]);
            this.template.block.hasEval = true;
        };
        /// Expressions


        JavaScriptCompiler.prototype.literal = function literal(value) {
            if (value === undefined) {
                this.pushValue([28 /* Undefined */]);
            } else {
                this.pushValue(value);
            }
        };

        JavaScriptCompiler.prototype.unknown = function unknown(name) {
            this.pushValue([23 /* Unknown */, name]);
        };

        JavaScriptCompiler.prototype.get = function get(_ref8) {
            var head = _ref8[0],
                path = _ref8[1];

            this.pushValue([24 /* Get */, head, path]);
        };

        JavaScriptCompiler.prototype.maybeLocal = function maybeLocal(path) {
            this.pushValue([25 /* MaybeLocal */, path]);
        };

        JavaScriptCompiler.prototype.concat = function concat() {
            this.pushValue([30 /* Concat */, this.popValue()]);
        };

        JavaScriptCompiler.prototype.helper = function helper(name) {
            var params = this.popValue();
            var hash = this.popValue();
            this.pushValue([29 /* Helper */, name, params, hash]);
        };
        /// Stack Management Opcodes


        JavaScriptCompiler.prototype.prepareArray = function prepareArray(size) {
            var values = [];
            for (var i = 0; i < size; i++) {
                values.push(this.popValue());
            }
            this.pushValue(values);
        };

        JavaScriptCompiler.prototype.prepareObject = function prepareObject(size) {

            var keys = new Array(size);
            var values = new Array(size);
            for (var i = 0; i < size; i++) {
                keys[i] = this.popValue();
                values[i] = this.popValue();
            }
            this.pushValue([keys, values]);
        };
        /// Utilities


        JavaScriptCompiler.prototype.endComponent = function endComponent() {
            var component = this.blocks.pop();

            return component.toJSON();
        };

        JavaScriptCompiler.prototype.startInlineBlock = function startInlineBlock(symbols) {
            var block = new InlineBlock(symbols);
            this.blocks.push(block);
        };

        JavaScriptCompiler.prototype.endInlineBlock = function endInlineBlock() {
            var blocks = this.blocks;

            var block = blocks.pop();
            return block.toJSON();
        };

        JavaScriptCompiler.prototype.push = function push(args) {
            this.currentBlock.push(args);
        };

        JavaScriptCompiler.prototype.pushValue = function pushValue(val) {
            this.values.push(val);
        };

        JavaScriptCompiler.prototype.popValue = function popValue() {

            return this.values.pop();
        };

        _createClass$1(JavaScriptCompiler, [{
            key: 'currentBlock',
            get: function get() {
                return this.blocks.current;
            }
        }, {
            key: 'currentComponent',
            get: function get() {
                var block = this.currentBlock;
                if (block instanceof ComponentBlock) {
                    return block;
                } else {
                    throw new Error('Expected ComponentBlock on stack, found ' + block.constructor.name);
                }
            }
        }]);

        return JavaScriptCompiler;
    }();

    // There is a small whitelist of namespaced attributes specially
    // enumerated in
    // https://www.w3.org/TR/html/syntax.html#attributes-0
    //
    // > When a foreign element has one of the namespaced attributes given by
    // > the local name and namespace of the first and second cells of a row
    // > from the following table, it must be written using the name given by
    // > the third cell from the same row.
    //
    // In all other cases, colons are interpreted as a regular character
    // with no special meaning:
    //
    // > No other namespaced attribute can be expressed in the HTML syntax.
    var XLINK = 'http://www.w3.org/1999/xlink';
    var XML = 'http://www.w3.org/XML/1998/namespace';
    var XMLNS = 'http://www.w3.org/2000/xmlns/';
    var WHITELIST = {
        'xlink:actuate': XLINK,
        'xlink:arcrole': XLINK,
        'xlink:href': XLINK,
        'xlink:role': XLINK,
        'xlink:show': XLINK,
        'xlink:title': XLINK,
        'xlink:type': XLINK,
        'xml:base': XML,
        'xml:lang': XML,
        'xml:space': XML,
        xmlns: XMLNS,
        'xmlns:xlink': XMLNS
    };
    function getAttrNamespace(attrName) {
        return WHITELIST[attrName] || null;
    }

    var _createClass$2 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    function _classCallCheck$2(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    var SymbolAllocator = function () {
        function SymbolAllocator(ops) {
            _classCallCheck$2(this, SymbolAllocator);

            this.ops = ops;
            this.symbolStack = new util.Stack();
        }

        SymbolAllocator.prototype.process = function process() {
            var out = [];
            var ops = this.ops;

            for (var i = 0; i < ops.length; i++) {
                var op = ops[i];
                var result = this.dispatch(op);
                if (result === undefined) {
                    out.push(op);
                } else {
                    out.push(result);
                }
            }
            return out;
        };

        SymbolAllocator.prototype.dispatch = function dispatch(op) {
            var name = op[0];
            var operand = op[1];
            return this[name](operand);
        };

        SymbolAllocator.prototype.startProgram = function startProgram(op) {
            this.symbolStack.push(op.symbols);
        };

        SymbolAllocator.prototype.endProgram = function endProgram(_op) {
            this.symbolStack.pop();
        };

        SymbolAllocator.prototype.startBlock = function startBlock(op) {
            this.symbolStack.push(op.symbols);
        };

        SymbolAllocator.prototype.endBlock = function endBlock(_op) {
            this.symbolStack.pop();
        };

        SymbolAllocator.prototype.openNamedBlock = function openNamedBlock(op) {
            this.symbolStack.push(op.symbols);
        };

        SymbolAllocator.prototype.closeNamedBlock = function closeNamedBlock(_op) {
            this.symbolStack.pop();
        };

        SymbolAllocator.prototype.flushElement = function flushElement(op) {
            this.symbolStack.push(op.symbols);
        };

        SymbolAllocator.prototype.closeElement = function closeElement(_op) {
            this.symbolStack.pop();
        };

        SymbolAllocator.prototype.closeComponent = function closeComponent(_op) {
            this.symbolStack.pop();
        };

        SymbolAllocator.prototype.closeDynamicComponent = function closeDynamicComponent(_op) {
            this.symbolStack.pop();
        };

        SymbolAllocator.prototype.attrSplat = function attrSplat(_op) {
            return ['attrSplat', this.symbols.allocateBlock('attrs')];
        };

        SymbolAllocator.prototype.get = function get(op) {
            var name = op[0],
                rest = op[1];

            if (name === 0) {
                return ['get', [0, rest]];
            }
            if (isLocal(name, this.symbols)) {
                var head = this.symbols.get(name);
                return ['get', [head, rest]];
            } else if (name[0] === '@') {
                var _head = this.symbols.allocateNamed(name);
                return ['get', [_head, rest]];
            } else {
                return ['maybeLocal', [name].concat(rest)];
            }
        };

        SymbolAllocator.prototype.maybeGet = function maybeGet(op) {
            var name = op[0],
                rest = op[1];

            if (name === 0) {
                return ['get', [0, rest]];
            }
            if (isLocal(name, this.symbols)) {
                var head = this.symbols.get(name);
                return ['get', [head, rest]];
            } else if (name[0] === '@') {
                var _head2 = this.symbols.allocateNamed(name);
                return ['get', [_head2, rest]];
            } else if (rest.length === 0) {
                return ['unknown', name];
            } else {
                return ['maybeLocal', [name].concat(rest)];
            }
        };

        SymbolAllocator.prototype.yield = function _yield(op) {
            if (op === 0) {
                throw new Error('Cannot yield to this');
            }
            return ['yield', this.symbols.allocateBlock(op)];
        };

        SymbolAllocator.prototype.debugger = function _debugger(_op) {
            return ['debugger', this.symbols.getEvalInfo()];
        };

        SymbolAllocator.prototype.hasBlock = function hasBlock(op) {
            if (op === 0) {
                throw new Error('Cannot hasBlock this');
            }
            return ['hasBlock', this.symbols.allocateBlock(op)];
        };

        SymbolAllocator.prototype.hasBlockParams = function hasBlockParams(op) {
            if (op === 0) {
                throw new Error('Cannot hasBlockParams this');
            }
            return ['hasBlockParams', this.symbols.allocateBlock(op)];
        };

        SymbolAllocator.prototype.partial = function partial(_op) {
            return ['partial', this.symbols.getEvalInfo()];
        };

        SymbolAllocator.prototype.text = function text(_op) {};

        SymbolAllocator.prototype.comment = function comment(_op) {};

        SymbolAllocator.prototype.openComponent = function openComponent(_op) {};

        SymbolAllocator.prototype.openElement = function openElement(_op) {};

        SymbolAllocator.prototype.staticArg = function staticArg(_op) {};

        SymbolAllocator.prototype.dynamicArg = function dynamicArg(_op) {};

        SymbolAllocator.prototype.staticAttr = function staticAttr(_op) {};

        SymbolAllocator.prototype.trustingAttr = function trustingAttr(_op) {};

        SymbolAllocator.prototype.dynamicAttr = function dynamicAttr(_op) {};

        SymbolAllocator.prototype.componentAttr = function componentAttr(_op) {};

        SymbolAllocator.prototype.trustingComponentAttr = function trustingComponentAttr(_op) {};

        SymbolAllocator.prototype.modifier = function modifier(_op) {};

        SymbolAllocator.prototype.append = function append(_op) {};

        SymbolAllocator.prototype.block = function block(_op) {};

        SymbolAllocator.prototype.literal = function literal(_op) {};

        SymbolAllocator.prototype.helper = function helper(_op) {};

        SymbolAllocator.prototype.unknown = function unknown(_op) {};

        SymbolAllocator.prototype.maybeLocal = function maybeLocal(_op) {};

        SymbolAllocator.prototype.prepareArray = function prepareArray(_op) {};

        SymbolAllocator.prototype.prepareObject = function prepareObject(_op) {};

        SymbolAllocator.prototype.concat = function concat(_op) {};

        _createClass$2(SymbolAllocator, [{
            key: 'symbols',
            get: function get() {
                return this.symbolStack.current;
            }
        }]);

        return SymbolAllocator;
    }();
    function isLocal(name, symbols) {
        return symbols && symbols.has(name);
    }

    function _classCallCheck$3(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function isTrustedValue(value) {
        return value.escaped !== undefined && !value.escaped;
    }

    var TemplateCompiler = function () {
        function TemplateCompiler() {
            _classCallCheck$3(this, TemplateCompiler);

            this.templateId = 0;
            this.templateIds = [];
            this.opcodes = [];
            this.includeMeta = false;
        }

        TemplateCompiler.compile = function compile(ast, options) {
            var templateVisitor = new TemplateVisitor();
            templateVisitor.visit(ast);
            var compiler = new TemplateCompiler();
            var opcodes = compiler.process(templateVisitor.actions);
            var symbols = new SymbolAllocator(opcodes).process();
            var out = JavaScriptCompiler.process(symbols, ast.symbols, options);
            return out;
        };

        TemplateCompiler.prototype.process = function process(actions) {
            var _this = this;

            actions.forEach(function (_ref) {
                var name = _ref[0],
                    args = _ref.slice(1);

                if (!_this[name]) {
                    throw new Error('Unimplemented ' + name + ' on TemplateCompiler');
                }
                _this[name].apply(_this, args);
            });
            return this.opcodes;
        };

        TemplateCompiler.prototype.startProgram = function startProgram(_ref2) {
            var program = _ref2[0];

            this.opcode(['startProgram', program], program);
        };

        TemplateCompiler.prototype.endProgram = function endProgram() {
            this.opcode(['endProgram', null], null);
        };

        TemplateCompiler.prototype.startBlock = function startBlock(_ref3) {
            var program = _ref3[0];

            this.templateId++;
            this.opcode(['startBlock', program], program);
        };

        TemplateCompiler.prototype.endBlock = function endBlock() {
            this.templateIds.push(this.templateId - 1);
            this.opcode(['endBlock', null], null);
        };

        TemplateCompiler.prototype.text = function text(_ref4) {
            var action = _ref4[0];

            this.opcode(['text', action.chars], action);
        };

        TemplateCompiler.prototype.comment = function comment(_ref5) {
            var action = _ref5[0];

            this.opcode(['comment', action.value], action);
        };

        TemplateCompiler.prototype.openElement = function openElement(_ref6) {
            var action = _ref6[0];

            var attributes = action.attributes;
            var simple = true;
            for (var i = 0; i < attributes.length; i++) {
                var attr = attributes[i];
                if (attr.name === '...attributes') {
                    simple = false;
                    break;
                }
            }
            if (action.modifiers.length > 0) {
                simple = false;
            }
            var actionIsComponent = false;
            if (isDynamicComponent(action)) {
                var head = void 0,
                    rest = void 0;

                var _action$tag$split = action.tag.split('.');

                head = _action$tag$split[0];
                rest = _action$tag$split.slice(1);

                if (head === 'this') {
                    head = 0;
                }
                this.opcode(['get', [head, rest]]);
                this.opcode(['openComponent', action], action);
                actionIsComponent = true;
            } else if (isNamedBlock(action)) {
                this.opcode(['openNamedBlock', action], action);
            } else if (isComponent(action)) {
                this.opcode(['openComponent', action], action);
                actionIsComponent = true;
            } else {
                this.opcode(['openElement', [action, simple]], action);
            }
            if (!isNamedBlock(action)) {
                // TODO: Assert no attributes
                var typeAttr = null;
                var attrs = action.attributes;
                for (var _i = 0; _i < attrs.length; _i++) {
                    if (attrs[_i].name === 'type') {
                        typeAttr = attrs[_i];
                        continue;
                    }
                    this.attribute([attrs[_i]], !simple || actionIsComponent);
                }
                if (typeAttr) {
                    this.attribute([typeAttr], !simple || actionIsComponent);
                }
                for (var _i2 = 0; _i2 < action.modifiers.length; _i2++) {
                    this.modifier([action.modifiers[_i2]]);
                }
                this.opcode(['flushElement', action], null);
            }
        };

        TemplateCompiler.prototype.closeElement = function closeElement(_ref7) {
            var action = _ref7[0];

            if (isNamedBlock(action)) {
                this.opcode(['closeNamedBlock', action]);
            } else if (isDynamicComponent(action)) {
                this.opcode(['closeDynamicComponent', action], action);
            } else if (isComponent(action)) {
                this.opcode(['closeComponent', action], action);
            } else {
                this.opcode(['closeElement', action], action);
            }
        };

        TemplateCompiler.prototype.attribute = function attribute(_ref8, isComponent) {
            var action = _ref8[0];
            var name = action.name,
                value = action.value;

            var namespace = getAttrNamespace(name);
            var isStatic = this.prepareAttributeValue(value);
            if (name.charAt(0) === '@') {
                // Arguments
                if (isStatic) {
                    this.opcode(['staticArg', name], action);
                } else if (action.value.type === 'MustacheStatement') {
                    this.opcode(['dynamicArg', name], action);
                } else {
                    this.opcode(['dynamicArg', name], action);
                }
            } else {
                var isTrusting = isTrustedValue(value);
                if (isStatic && name === '...attributes') {
                    this.opcode(['attrSplat', null], action);
                } else if (isStatic && !isComponent) {
                    this.opcode(['staticAttr', [name, namespace]], action);
                } else if (isTrusting) {
                    this.opcode([isComponent ? 'trustingComponentAttr' : 'trustingAttr', [name, namespace]], action);
                } else if (action.value.type === 'MustacheStatement') {
                    this.opcode([isComponent ? 'componentAttr' : 'dynamicAttr', [name, namespace]], action);
                } else {
                    this.opcode([isComponent ? 'componentAttr' : 'dynamicAttr', [name, namespace]], action);
                }
            }
        };

        TemplateCompiler.prototype.modifier = function modifier(_ref9) {
            var action = _ref9[0];

            assertIsSimplePath(action.path, action.loc, 'modifier');
            var parts = action.path.parts;

            this.prepareHelper(action);
            this.opcode(['modifier', parts[0]], action);
        };

        TemplateCompiler.prototype.mustache = function mustache(_ref10) {
            var action = _ref10[0];
            var path = action.path;

            if (syntax.isLiteral(path)) {
                this.mustacheExpression(action);
                this.opcode(['append', !action.escaped], action);
            } else if (isYield(path)) {
                var to = assertValidYield(action);
                this.yield(to, action);
            } else if (isPartial(path)) {
                var params = assertValidPartial(action);
                this.partial(params, action);
            } else if (isDebugger(path)) {
                assertValidDebuggerUsage(action);
                this.debugger('debugger', action);
            } else {
                this.mustacheExpression(action);
                this.opcode(['append', !action.escaped], action);
            }
        };

        TemplateCompiler.prototype.block = function block(_ref11) {
            var action /*, index, count*/ = _ref11[0];

            this.prepareHelper(action);
            var templateId = this.templateIds.pop();
            var inverseId = action.inverse === null ? null : this.templateIds.pop();
            this.opcode(['block', [action.path.parts[0], templateId, inverseId]], action);
        };
        /// Internal actions, not found in the original processed actions


        TemplateCompiler.prototype.arg = function arg(_ref12) {
            var path = _ref12[0];

            var _path$parts = path.parts,
                head = _path$parts[0],
                rest = _path$parts.slice(1);

            this.opcode(['get', ['@' + head, rest]], path);
        };

        TemplateCompiler.prototype.mustacheExpression = function mustacheExpression(expr) {
            var path = expr.path;

            if (syntax.isLiteral(path)) {
                this.opcode(['literal', path.value], expr);
            } else if (isBuiltInHelper(path)) {
                this.builtInHelper(expr);
            } else if (isArg(path)) {
                this.arg([path]);
            } else if (isHelperInvocation(expr)) {
                this.prepareHelper(expr);
                this.opcode(['helper', path.parts[0]], expr);
            } else if (path.this) {
                this.opcode(['get', [0, path.parts]], expr);
            } else {
                var _path$parts2 = path.parts,
                    head = _path$parts2[0],
                    parts = _path$parts2.slice(1);

                this.opcode(['maybeGet', [head, parts]], expr);
            }
            // } else if (isLocal(path, this.symbols)) {
            //   let [head, ...parts] = path.parts;
            //   this.opcode(['get', [head, parts]], expr);
            // } else if (isSimplePath(path)) {
            //   this.opcode(['unknown', path.parts[0]], expr);
            // } else {
            //   this.opcode(['maybeLocal', path.parts], expr);
            // }
        };
        /// Internal Syntax


        TemplateCompiler.prototype.yield = function _yield(to, action) {
            this.prepareParams(action.params);
            this.opcode(['yield', to], action);
        };

        TemplateCompiler.prototype.debugger = function _debugger(_name, action) {
            this.opcode(['debugger', null], action);
        };

        TemplateCompiler.prototype.hasBlock = function hasBlock(name, action) {
            this.opcode(['hasBlock', name], action);
        };

        TemplateCompiler.prototype.hasBlockParams = function hasBlockParams(name, action) {
            this.opcode(['hasBlockParams', name], action);
        };

        TemplateCompiler.prototype.partial = function partial(_params, action) {
            this.prepareParams(action.params);
            this.opcode(['partial', null], action);
        };

        TemplateCompiler.prototype.builtInHelper = function builtInHelper(expr) {
            var path = expr.path;

            if (isHasBlock(path)) {
                var name = assertValidHasBlockUsage(expr.path.original, expr);
                this.hasBlock(name, expr);
            } else if (isHasBlockParams(path)) {
                var _name2 = assertValidHasBlockUsage(expr.path.original, expr);
                this.hasBlockParams(_name2, expr);
            }
        };
        /// Expressions, invoked recursively from prepareParams and prepareHash


        TemplateCompiler.prototype.SubExpression = function SubExpression(expr) {
            if (isBuiltInHelper(expr.path)) {
                this.builtInHelper(expr);
            } else {
                this.prepareHelper(expr);
                this.opcode(['helper', expr.path.parts[0]], expr);
            }
        };

        TemplateCompiler.prototype.PathExpression = function PathExpression(expr) {
            if (expr.data) {
                this.arg([expr]);
            } else {
                var _expr$parts = expr.parts,
                    head = _expr$parts[0],
                    rest = _expr$parts.slice(1);

                if (expr.this) {
                    this.opcode(['get', [0, expr.parts]], expr);
                } else {
                    this.opcode(['get', [head, rest]], expr);
                }
            }
        };

        TemplateCompiler.prototype.StringLiteral = function StringLiteral(action) {
            this.opcode(['literal', action.value], action);
        };

        TemplateCompiler.prototype.BooleanLiteral = function BooleanLiteral(action) {
            this.opcode(['literal', action.value], action);
        };

        TemplateCompiler.prototype.NumberLiteral = function NumberLiteral(action) {
            this.opcode(['literal', action.value], action);
        };

        TemplateCompiler.prototype.NullLiteral = function NullLiteral(action) {
            this.opcode(['literal', action.value], action);
        };

        TemplateCompiler.prototype.UndefinedLiteral = function UndefinedLiteral(action) {
            this.opcode(['literal', action.value], action);
        };
        /// Utilities


        TemplateCompiler.prototype.opcode = function opcode(_opcode) {
            var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            // TODO: This doesn't really work
            if (this.includeMeta && action) {
                _opcode.push(this.meta(action));
            }
            this.opcodes.push(_opcode);
        };

        TemplateCompiler.prototype.prepareHelper = function prepareHelper(expr) {
            assertIsSimplePath(expr.path, expr.loc, 'helper');
            var params = expr.params,
                hash = expr.hash;

            this.prepareHash(hash);
            this.prepareParams(params);
        };

        TemplateCompiler.prototype.prepareParams = function prepareParams(params) {
            if (!params.length) {
                this.opcode(['literal', null], null);
                return;
            }
            for (var i = params.length - 1; i >= 0; i--) {
                var param = params[i];

                this[param.type](param);
            }
            this.opcode(['prepareArray', params.length], null);
        };

        TemplateCompiler.prototype.prepareHash = function prepareHash(hash) {
            var pairs = hash.pairs;
            if (!pairs.length) {
                this.opcode(['literal', null], null);
                return;
            }
            for (var i = pairs.length - 1; i >= 0; i--) {
                var _pairs$i = pairs[i],
                    key = _pairs$i.key,
                    value = _pairs$i.value;

                this[value.type](value);
                this.opcode(['literal', key], null);
            }
            this.opcode(['prepareObject', pairs.length], null);
        };

        TemplateCompiler.prototype.prepareAttributeValue = function prepareAttributeValue(value) {
            // returns the static value if the value is static
            switch (value.type) {
                case 'TextNode':
                    this.opcode(['literal', value.chars], value);
                    return true;
                case 'MustacheStatement':
                    this.attributeMustache([value]);
                    return false;
                case 'ConcatStatement':
                    this.prepareConcatParts(value.parts);
                    this.opcode(['concat', null], value);
                    return false;
            }
        };

        TemplateCompiler.prototype.prepareConcatParts = function prepareConcatParts(parts) {
            for (var i = parts.length - 1; i >= 0; i--) {
                var part = parts[i];
                if (part.type === 'MustacheStatement') {
                    this.attributeMustache([part]);
                } else if (part.type === 'TextNode') {
                    this.opcode(['literal', part.chars], null);
                }
            }
            this.opcode(['prepareArray', parts.length], null);
        };

        TemplateCompiler.prototype.attributeMustache = function attributeMustache(_ref13) {
            var action = _ref13[0];

            this.mustacheExpression(action);
        };

        TemplateCompiler.prototype.meta = function meta(node) {
            var loc = node.loc;
            if (!loc) {
                return [];
            }
            var source = loc.source,
                start = loc.start,
                end = loc.end;

            return ['loc', [source || null, [start.line, start.column], [end.line, end.column]]];
        };

        return TemplateCompiler;
    }();

    function isHelperInvocation(mustache) {
        return mustache.params && mustache.params.length > 0 || mustache.hash && mustache.hash.pairs.length > 0;
    }
    function isSimplePath(_ref14) {
        var parts = _ref14.parts;

        return parts.length === 1;
    }
    function isYield(path) {
        return path.original === 'yield';
    }
    function isPartial(path) {
        return path.original === 'partial';
    }
    function isDebugger(path) {
        return path.original === 'debugger';
    }
    function isHasBlock(path) {
        return path.original === 'has-block';
    }
    function isHasBlockParams(path) {
        return path.original === 'has-block-params';
    }
    function isBuiltInHelper(path) {
        return isHasBlock(path) || isHasBlockParams(path);
    }
    function isArg(path) {
        return !!path['data'];
    }
    function isDynamicComponent(element) {
        var open = element.tag.charAt(0);

        var _element$tag$split = element.tag.split('.'),
            maybeLocal = _element$tag$split[0];

        var isNamedArgument = open === '@';
        var isLocal = element.symbols.has(maybeLocal);
        var isThisPath = element.tag.indexOf('this.') === 0;
        return isLocal || isNamedArgument || isThisPath;
    }
    function isComponent(element) {
        var open = element.tag.charAt(0);
        var isPath = element.tag.indexOf('.') > -1;
        var isUpperCase = open === open.toUpperCase() && open !== open.toLowerCase();
        return isUpperCase && !isPath || isDynamicComponent(element);
    }
    function isNamedBlock(element) {
        var open = element.tag.charAt(0);
        return open === ':';
    }
    function assertIsSimplePath(path, loc, context) {
        if (!isSimplePath(path)) {
            throw new syntax.SyntaxError('`' + path.original + '` is not a valid name for a ' + context + ' on line ' + loc.start.line + '.', path.loc);
        }
    }
    function assertValidYield(statement) {
        var pairs = statement.hash.pairs;

        if (pairs.length === 1 && pairs[0].key !== 'to' || pairs.length > 1) {
            throw new syntax.SyntaxError('yield only takes a single named argument: \'to\'', statement.loc);
        } else if (pairs.length === 1 && pairs[0].value.type !== 'StringLiteral') {
            throw new syntax.SyntaxError('you can only yield to a literal value', statement.loc);
        } else if (pairs.length === 0) {
            return 'default';
        } else {
            return pairs[0].value.value;
        }
    }
    function assertValidPartial(statement) {
        var params = statement.params,
            hash = statement.hash,
            escaped = statement.escaped,
            loc = statement.loc;

        if (params && params.length !== 1) {
            throw new syntax.SyntaxError('Partial found with no arguments. You must specify a template name. (on line ' + loc.start.line + ')', statement.loc);
        } else if (hash && hash.pairs.length > 0) {
            throw new syntax.SyntaxError('partial does not take any named arguments (on line ' + loc.start.line + ')', statement.loc);
        } else if (!escaped) {
            throw new syntax.SyntaxError('{{{partial ...}}} is not supported, please use {{partial ...}} instead (on line ' + loc.start.line + ')', statement.loc);
        }
        return params;
    }
    function assertValidHasBlockUsage(type, call) {
        var params = call.params,
            hash = call.hash,
            loc = call.loc;

        if (hash && hash.pairs.length > 0) {
            throw new syntax.SyntaxError(type + ' does not take any named arguments', call.loc);
        }
        if (params.length === 0) {
            return 'default';
        } else if (params.length === 1) {
            var param = params[0];
            if (param.type === 'StringLiteral') {
                return param.value;
            } else {
                throw new syntax.SyntaxError('you can only yield to a literal value (on line ' + loc.start.line + ')', call.loc);
            }
        } else {
            throw new syntax.SyntaxError(type + ' only takes a single positional argument (on line ' + loc.start.line + ')', call.loc);
        }
    }
    function assertValidDebuggerUsage(statement) {
        var params = statement.params,
            hash = statement.hash;

        if (hash && hash.pairs.length > 0) {
            throw new syntax.SyntaxError('debugger does not take any named arguments', statement.loc);
        }
        if (params.length === 0) {
            return 'default';
        } else {
            throw new syntax.SyntaxError('debugger does not take any positional arguments', statement.loc);
        }
    }

    var defaultId = function () {
        if (typeof require === 'function') {
            try {
                /* tslint:disable:no-require-imports */
                var crypto = require('crypto');
                /* tslint:enable:no-require-imports */
                var idFn = function idFn(src) {
                    var hash = crypto.createHash('sha1');
                    hash.update(src, 'utf8');
                    // trim to 6 bytes of data (2^48 - 1)
                    return hash.digest('base64').substring(0, 8);
                };
                idFn('test');
                return idFn;
            } catch (e) {}
        }
        return function idFn() {
            return null;
        };
    }();
    var defaultOptions = {
        id: defaultId,
        meta: {}
    };
    function precompile(string) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultOptions;

        var ast = syntax.preprocess(string, options);
        var meta = options.meta;

        var _TemplateCompiler$com = TemplateCompiler.compile(ast, options),
            block = _TemplateCompiler$com.block;

        var idFn = options.id || defaultId;
        var blockJSON = JSON.stringify(block.toJSON());
        var templateJSONObject = {
            id: idFn(JSON.stringify(meta) + blockJSON),
            block: blockJSON,
            meta: meta
        };
        // JSON is javascript
        return JSON.stringify(templateJSONObject);
    }

    exports.defaultId = defaultId;
    exports.precompile = precompile;
    exports.TemplateCompiler = TemplateCompiler;
    exports.TemplateVisitor = TemplateVisitor;

    Object.defineProperty(exports, '__esModule', { value: true });

});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,